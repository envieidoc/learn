#!/usr/bin/env bash
#functions, copy and paste them in your own scripts

#https://github.com/chilicuil/learn/blob/master/sh/lib
#if you have more or can improve the current ones please send your push request!

#new functions:
#[+] must be self contained, with no dependencies on other functions
#[+] can depend on exotic cli commands or be bash specific (portability is a plus)
#[+] must follow general style (name convention, return comment, indentation, etc)
#[+] must not print errors, return 1 instead
#[+] must provide an example

_addcron()
{   #adds cron job, returns 1 on error
    [ -z "$1" ] && return 1
    crontab -l | { cat; printf "%s\\n" "$@"; } | crontab -
}
#==================================================== Example ====
#_addcron "* * * * * /path/task"
#=================================================================

_animbarcui()
{   #prints a bar of o@o moving
    [ -z "$1" ] && { printf "%4s\n" ""; return 1; }
    local pid=$1
    local animation_state=1

    if [ ! "$(ps -p $pid -o comm=)" ]; then
        printf "%4s\n" ""
        return
    fi

    printf "%s" " "
    local c=0; j=0;

    exec < /dev/tty
    local oldstty=$(stty -g)
    stty raw -echo min 0
    printf "%b" "\033[6n" > /dev/tty
    IFS=';' read -r -d R -a pos
    stty $oldstty
    local col=$(expr ${pos[1]} - 1)
    col=$(expr $col + 4)

    while [ "`ps -p $pid -o comm=`" ]; do
        case $animation_state in
            1)
                printf "%s" "o@o"
                animation_state=2
                ;;
            2)
                if [ $j -lt $(expr $(tput cols) - $col) ]; then
                    for (( i = 0; i < c+4; i++ )); do
                        printf "%b" "\b";
                    done
                    printf "%*s%s" $(expr $c + 1) "" "o @o"
                    j=$(expr $j + 1 )
                    c=$(expr $c + 1 )
                    if ! [ $j -lt $(expr $(tput cols) - $col) ]; then
                        animation_state=3
                    fi
                fi
                ;;
            3)
                for (( i = 0; i < c+3; i++ )); do
                    printf "%b" "\b";
                done
                printf "%*s%s" $(expr $c) "" "o@o "
                animation_state=4
                ;;
            4)
                for (( i = 0; i < c+4; i++ )); do
                    printf "%b" "\b";
                done
                printf "%*s%s" $(expr $c) "" "o@o?"
                animation_state=5
                ;;
            5)
                for (( i = 0; i < c+4; i++ )); do
                    printf "%b" "\b";
                done
                printf "%*s%s" $(expr $c) "" "o@o "
                animation_state=6
                ;;
            6)
                if [ $j -gt > 0 ]; then
                    for (( i = 0; i < c+4; i++ )); do
                        printf "%b" "\b";
                    done
                    #set -x
                    printf "%*s%s" $(expr $c - 1) "" "o@ o"
                    printf "%*s" 1 ""
                    printf "%b" "\b";
                    #set +x

                    j=$(expr  $j - 1 )
                    c=$(expr  $c - 1 )
                else
                    for (( i = 0; i < 4; i++ )); do
                        printf "%b" "\b";
                    done
                    printf "%4s" ""
                    for (( i = 0; i < 4; i++ )); do
                        printf "%b" "\b";
                    done
                    printf "%s" "o@o"
                    animation_state=2
                fi
                ;;
        esac
        sleep 1
    done
    for (( i = 0; i < 4; i++ )); do
        printf "%b" "\b";
    done
    printf "%4s\n" ""
}
#==================================================== Example ====
#tar zxf big_file.tar.gz > /dev/null 2>&1 &
#printf "%s" "[+] tar is running ..." && _animbarcui $(pidof tar)
#=================================================================

_animcui()
{
    [ -z "$1" ] && { printf "%5s\n" ""; return 1; }
    local pid="$1"
    local animation_state=1

    if [ ! "$(ps -p $pid -o comm=)" ]; then
        printf "%5s\n" ""
        return
    fi

    printf "%s" "      "

    while [ "`ps -p $pid -o comm=`" ]; do
        printf "%b" "\b\b\b\b\b"
        case $animation_state in
            1)
                printf "%s" '\o@o\'
                animation_state=2
                ;;
            2)
                printf "%s" '|o@o|'
                animation_state=3
                ;;
            3)
                printf "%s" '/o@o/'
                animation_state=4
                ;;
            4)
                printf "%s" '|o@o|'
                animation_state=1
                ;;
        esac
        sleep 1
    done
    printf "%b" "\b\b\b\b\b" && printf "%5s\n" ""
}
#==================================================== Example ====
#tar zxf big_file.tar.gz > /dev/null 2>&1 &
#printf "%s" "[+] tar is running ..." && _animcui $(pidof tar)
#=================================================================

_animrotate()
{   #shows an animation as long as a process is in memory
    [ -z "$1" ] && return 1
    local pid=$1
    local animation_state=1
    printf "%b" "    "

    while [ "`ps -p $pid -o comm=`" ]; do
        # rotating star
        printf "%b" "\b\b\b"
        case $animation_state in
            1)
                printf "%s" "["
                printf "%b" "\033[1m|\033[0m"
                printf "%s" "]"
                animation_state=2
                ;;
            2)
                printf "%s" "["
                printf "%b" "\033[1m/\033[0m"
                printf "%s" "]"
                animation_state=3
                ;;
            3)
                printf "%s" "["
                printf "%b" "\033[1m-\033[0m"
                printf "%s" "]"
                animation_state=4
                ;;
            4)
                printf "%s" "["
                printf "%b" "\033[1m"
                printf "%s" "\\"
                printf "%b" "\033[0m"
                printf "%s" "]"
                animation_state=1
                ;;
        esac
        sleep 1
    done
    printf "%b" "\b\b\b\b\b\b\b       "
}
#==================================================== Example ====
#printf "%s" "[+] tar" && _animrotate $(pidof tar)
#=================================================================

_cidr2mask()
{
  local i mask=""
  local full_octets=$(expr $1 / 8)
  local partial_octet=$(expr $1 % 8)

  for ((i=0;i<4;i+=1)); do
    if [ $i -lt $full_octets ]; then
        mask=$(expr $mask + 255)
    elif [ $i -eq $full_octets ]; then
        mask+=$((256 - 2**(8-$partial_octet)))
    else
        mask=$(expr $mask + 0)
    fi
    [ $i -lt 3 ] && mask+=.
  done

  printf "%s\\n" "$mask"
}

_arch()
{   #check for system arch, returns [64|32]
    local arch
    [ -z "$MACHTYPE" ] && arch=$(uname -m) || arch=$(printf "%s\\n" "$MACHTYPE" | cut -d- -f1)

    case $arch in
        x86_64)
            arch=64;
            ;;
        i686)
            arch=32;
            ;;
        *)
            exit 1
            ;;
    esac

    printf "%s\\n" "$arch"
}
#==================================================== Example ====
#arch=$(_arch)
#[ $arch -eq 32 ] && command32 || command64
#=================================================================

_basename()
{
    [ -z "$1" ] && return 0
    expr "$1" : '.*/\([^/]*\)'
}
#==================================================== Example ====
#_basename /path/file #returns file
#=================================================================

_cleanup()
{   #clean tmp files, exits with no parameters
    stty echo
    printf "\\n"
    printf "%s\\n" "[+] cleanup ..."
    your_commands_here

    [ -z "$1" ] && exit
}
#==================================================== Example ====
#trap _cleanup SIGINT SIGTERM #trap ctrl-c
#_cleanup 1
#=================================================================

_cmd()
{   #print current command, exits on fail
    [ -z "$1" ] && return 0

    printf "%s " "    $ $@"
    printf "\\n"
    eval "$@"

    local status=$?
    [ X"$status" != X"0" ] && exit $status || return 0
}
#==================================================== Example ====
#_cmd rm file
#=================================================================

_cmdsudo()
{   #print && execute a command, exits if command fails
    [ -z "$1" ] && return 0
    local serr=$$

    printf "%s " "    $ $@"
    printf "\\n"
    printf "%s\\n" "$sudopwd" | $sudocmd eval "$@" > /tmp/"$serr".out 2>&1

    local status=$?
    [ X"$status" != X"0" ] && { cat /tmp/"$serr".out; rm -rf /tmp/"$serr".out; exit $status; } || { rm -rf /tmp/"$serr".out; return; }
}
#==================================================== Example ====
#_cmdsudo rm /file
#=================================================================

_decode64()
{
    [ -z "$1" ] && printf "\\n"
    printf "%s\\n" "$1" | openssl enc -base64 -d
}
#==================================================== Example ====
#string=$(_decode64 $string)
#[ -z "$string" ] && printf "%s\\n" "fail, empty string"
#=================================================================

_die()
{   #print a stacktrace with a msg, exits with 1
    local frame=0
    while caller $frame; do
        frame=$(expr $frame+1);
    done

    printf "%s\\n" "$*"
    exit 1
}
#==================================================== Example ====
#[ -z "$var" ] && _die "error msg"
#=================================================================

_dirname()
{   #returns string containing dirname on success, 1 on fail

    #http://www.linuxmisc.com/12-unix-web-servers/d31beb238f7b5a6b.htm
    if [ -z "$1" ]; then
        return 1;
    else
        local dir="${1%${1##*/}}"
        [ X"${dir:=./}" != X"/" ] && dir="${dir%?}"
        printf "%s\\n" "$dir"
    fi
}
#==================================================== Example ====
#_dirname /path/file #returns /path
#=================================================================

_distro()
{   #return distro name in a lower string

    local DIST_INFO="/etc/lsb-release"
    if [ -r "$DIST_INFO" ]; then
        . "$DIST_INFO"
    fi

    if [ -z "$DISTRIB_ID" ]; then
        local DISTRIB_ID="Unknown";
        if [ -f /etc/arch-release ]; then
            DISTRIB_ID="Arch"
        elif [ -r /etc/knoppix-version ]; then
            DISTRIB_ID="Knoppix"
        elif [ -r /etc/sidux-version ]; then
            DISTRIB_ID="Sidux"
        elif [ -r /etc/debian_version ]; then
            DISTRIB_ID="Debian"
        elif [ -r /etc/issue ]; then
            DISTRIB_ID=$(cat /etc/issue.net | awk '{print $1}')
            if [ X"$DISTRIB_ID" = X"Ubuntu" ]; then
                DISTRIB_ID=Ubuntu
            fi
        elif [ -r /etc/gentoo-release ]; then
            DISTRIB_ID="Gentoo"
        elif [ -f /etc/lfs-version ]; then
            DISTRIB_ID="LFS"
        elif [ -r /etc/pclinuxos-release ]; then
            DISTRIB_ID="PCLinuxOS"
        elif [ -f /etc/mandriva-release ] || [ -f /etc/mandrake-release ]; then
            DISTRIB_ID="Mandriva"
        elif [ -f /etc/redhat-release ]; then
            DISTRIB_ID="RedHat"
        elif [ -f /etc/fedora-release ]; then
            DISTRIB_ID="Fedora"
        elif [ -r /etc/vector-version ]; then
            DISTRIB_ID="VectorLinux"
        elif [ -r /etc/slackware-version ]; then
            DISTRIB_ID="$(cat /etc/slackware-version)"
        elif [ -f /etc/release ]; then
            DISTRIB_ID="Solaris"
        elif [ -r /etc/SuSE-release ]; then
            DISTRIB_ID="$(grep -i suse /etc/SuSE-release)"
        elif [ -f /etc/yellowdog-release ]; then
            DISTRIB_ID="YellowDog Linux"
        elif [ -f /etc/zenwalk-version  ]; then
            DISTRIB_ID="Zenwalk"
        fi
    fi

    printf "%s\\n" "$DISTRIB_ID" | tr '[:upper:]' '[:lower:]'
}
#==================================================== Example ====
#distro=$(_distro)
#=================================================================

_download()
{
    #requires liburi-perl
    local urll="$1"
    local prot=$(printf "%s\\n" "$urll" | cut -d: -f1)
    if [ X"$prot" = X"magnet" ]; then
        return 1 #not supported
    fi
    local path=$( printf "%s\\n" "$urll" | perl -MURI -le 'chomp($url = <>); print URI->new($url)->path' )
    local fn=$(expr "$path" : '.*/\([^/]*\)')
    local ext="${fn##*.}"

    case "$ext" in
        mp4|ogv|mpg|flv|avi|mkv|mov|wmv|webm|3gpp)
            local file=$(aria2c -q --bt-stop-timeout=120 --seed-time=0 --follow-torrent=mem --on-download-complete /bin/echo "$urll")
            [ -z "$file" ] && printf "%s\\n" "1" || printf "%s\\n" "$file" | cut -d" " -f3
            ;;
        torrent)
            mkdir torrent && cd torrent
            aria2c -q --bt-stop-timeout=120 --seed-time=0 --follow-torrent=mem "$urll" > /dev/null 2>&1
            OLDIFS=$IFS && IFS=$'\n'
            local files="$(find ./ -name "*.mp4" -o -name "*.ogv" -o -name "*.mpg" -o -name "*.flv" -o -name "*.avi" -o -name "*.mkv" -o -name "*.mov" -o -name "*.wmv" -o -name "*.webm" -o -name "*.3gpp" 2>/dev/null)"
            # restore it
            IFS=$OLDIFS
            [ -z "$files" ] && printf "%s\\n" "1" || printf "%s\\n" "$files"
            ;;
        *)
            printf "%s\\n" "1"
            ;;
    esac
}
#==================================================== Example ====
#FILE=$(_download $URL)
#[ "$FILE" -eq 1 ] && printf "%s\\n" "error" || printf "%s\\n" "done: $FILE"
#=================================================================

_echo()
{   #http://www.etalabs.net/sh_tricks.html
    fmt=%s end=\\n IFS=" "

    while [ $# -gt 1 ] ; do
        case "$1" in
            [!-]*|-*[!ne]*) break ;;
            *ne*|*en*) fmt=%b end= ;;
            *n*) end= ;;
            *e*) fmt=%b ;;
        esac
        shift
    done

    printf "$fmt$end" "$*"
}

_email()
{   #send email, return 0 on success, 1 otherwise
    #requires: libio-socket-ssl-perl, libnet-ssleay-perl and sendemail
    case $1 in
        gmail)
            shift
            sendemail -f "$1" -t "$2" -u "$3" -m "$4" -s smtp.gmail.com:587 -o tls=yes -xu "$5" -xp "$6" > /dev/null 2>&1
            ;;
        *)
            sendemail -f "$1" -t "$2" -u "$3" -m "$4" -s "$5" -xu "$6" -xp "$7" > /dev/null 2>&1
            ;;
    esac

    [ $? -eq 0 ] && return 0 || return 1
}
#==================================================== Example ====
#FROM="foo@gmail.com"; TO="bar@foo.com"; TITLE="hi"; MSG="how are you?"
#USER="foo"; PASSWD="secret"
#[ $(_mail gmail $FROM $TO $TITLE $MESSAGE $USER $PASSWD) -eq 0 ] && printf "%s\\n" "send" || printf "%s\\n" "error"

#FROM="foo@custom.com"; TO="bar@foo.com"; TITLE="hi"; MSG="how are you?"
#SERVER="smpt.custom.com:port"; USER="foo"; PASSWD="secret"
#[ $(_mail $FROM $TO $TITLE $MESSAGE $SERVER $USER $PASSWD) -eq 0 ] && printf "%s\\n" "send" || printf "%s\\n" "error"
#=================================================================

_encode64()
{
    [ -z "$1" ] && return 1
    printf "%s\\n" "$1" | openssl enc -base64
}
#==================================================== Example ====
#string=$(_encode64 $string)
#[ -z "$string" ] && printf "%s\\n" "fail, empty string"
#=================================================================

_existaptproxy()
{   #test if an apt proxy exist on the local network, return 0 on sucess, 1 otherwise
    avahi-browse -a  -t | grep apt-cacher-ng >/dev/null && return 0
    return 1
}
#==================================================== Example ====
#if ! _existaptproxy; then
    #printf "%s\\n" "no apt proxy was found, setting up one ..."
#fi
#=================================================================

_existuser()
{   #test if an user exists on the system, return 0 on sucess, 1 otherwise
    if id -u $1 >/dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}
#==================================================== Example ====
#if _existuser user; then
    #printf "%s\\n" "user was found ..."
#fi
#=================================================================

_fullpath()
{   #return full path of the argument, return string on success, 1 on fail
    if [ -z "$1" ]; then
        return 1;
    else
        if [ `expr substr ${1:-a} 1 2` != "/" ]; then
            local full_file=`pwd`"/"$1
        fi
    fi
    printf "%s\\n" "$full_file"
}
#==================================================== Example ====
#_fullpath file #returns /path/file
#=================================================================

_getcol()
{   #return an int with the col cursor position

    #http://stackoverflow.com/questions/2575037/how-to-get-the-cursor-position-in-bash
    exec < /dev/tty
    local oldstty=$(stty -g)
    stty raw -echo min 0
    # on my system, the following line can be replaced by the line below it
    printf "%b" "\033[6n" > /dev/tty
    # tput u7 > /dev/tty    # when TERM=xterm (and relatives)
    IFS=';' read -r -d R -a pos
    stty $oldstty
    # change from one-based to zero based so they work with: tput cup $row $col
    local col=$(expr ${pos[1]} - 1)
    printf "%s\\n" "$col"
}
#==================================================== Example ====
#printf "%s" "Hi"
#col=$(_getcol)
#printf "%s" " - $col characters"
#=================================================================

_getfs()
{
    [ -z "$1" ] && return 1
    udevadm info -q all -n "$1" | grep -i ID_FS_TYPE | cut -f2 -d'='
}

_getopt()
{   #define vars for cli arguments
    local var=""
    local wantarg=0
    for $(( i=1; i<=$#; i+=1 )); do
        local lastvar=$var
        var=${!i}
        if [ X"$var" = X"" ]; then
            continue
        fi
        printf "%s\\n" "\ $var" | grep -q -- '='
        if [ $? -eq 0 ]; then
            ## -*param=value
            local var=$(printf "%s\\n" "\ $var" | sed -r s/'^[ ]*-*'/''/)
            local myvar=${var%=*}
            local myval=${var#*=}
            eval "${myvar}"="'$myval'"
        else
            printf "%s\\n" "\ $var" | grep -E -q -- '^[ ]*-'
            if [ $? -eq 0 ]; then
                ## -*param$
                var=$(printf "%s\\n" "\ $var" | sed -r s/'^[ ]*-*'/''/)
                eval "${var}"=1
                local wantarg=1
            else
                printf "%s\\n" "\ $var" | grep -E -- '^[ ]*-'
                if [ $? -eq 0 ]; then
                    # the current one has a dash, so cannot be
                    # the argument to the last parameter
                    wantarg=0
                fi
                if [ $wantarg -eq 1 ]; then
                    # parameter argument
                    val=$var
                    var=$lastvar
                    eval "${var}"="'${val}'"
                    wantarg=0
                else
                    # parameter
                    if [ X"${!var}" = X"" ]; then
                        eval "${var}"=1
                    fi
                    wantarg=0
                fi
            fi
        fi
    done
}
#==================================================== Example ====
#OIFS=$IFS; IFS=$(printf "%b" "\n"); _getopt $@; IFS=$OIFS
##./getopts --foo=bar -v -n 10 blah -one='last arg'
#printf "%b" " foo:\t$foo v:\t$v n:\t$n blah:\t$blah one:\t$one "
#=================================================================

_getpasswd()
{   #define vars as passwords
    if [ -n "$1" ]
    then
        local option=`tr '[:upper:]' '[:lower:]' <<< $1`
        printf "%s" "Enter your $option password: "
        stty -echo
        read ${option}passwd
        stty echo
        printf "\\n"
    else
        printf "%s" "Enter your password: "
        stty -echo
        read passwd
        stty echo
        printf "\\n"
    fi
}
#==================================================== Example ====
#_getpasswd
#printf "%s\\n" "$passwd"
#_getpasswd config
#printf "%s\\n" "$configpasswd"
#=================================================================

_getroot()
{   #get sudo's password, define $sudopasswd and $sudocmd

    local tmp_path="/tmp"; local sudotest; local insudoers;

    if [ ! X"$LOGNAME" = X"root" ]; then
        printf "%s\\n" "Detecting user $LOGNAME (non-root) ..."
        printf "%s\\n" "Checking if sudo is available ..."
        sudotest=`type sudo >/dev/null 2>/dev/null; printf "%s\\n" "$?"`

        if [ X"$sudotest" = X"0" ]; then
            sudo -K
            if [ -e "$tmp_path/sudo.test" ]; then
                rm -f "$tmp_path/sudo.test"
            fi
            while [ -z "$sudopwd" ]; do
                printf "%s" "   - enter sudo-password: "
                stty -echo
                read sudopwd
                stty echo

                # password check
                printf "%s\\n" "$sudopwd" | sudo -S touch "$tmp_path/sudo.test" > "$tmp_path/sudo.output" 2>&1
                insudoers=$(grep -i "sudoers" "$tmp_path/sudo.output")
                if [ -n "$insudoers" ]; then
                    printf "%s\\n" "$sudopwd" | sudo -S rm "$tmp_path/sudo.output" > /dev/null 2>&1
                    exit
                fi

                if [ ! -e "$tmp_path/sudo.test" ]; then
                    sudopwd=""
                fi
            done

            sudocmd="/usr/bin/sudo -S"

            printf "%s\\n" "$sudopwd" | $sudocmd rm -f "$tmp_path/sudo.test" > /dev/null 2>&1
            printf "\\n"
        else
            printf "%s\\n" "You're not root and sudo isn't available. Please run this script as root!"
            exit
        fi
    fi
}
#==================================================== Example ====
#_getroot
#printf "%s\\n" "$sudopwd" | $sudocmd rm file
#=================================================================

_getrow()
{   #return an int with the col cursor position

    #http://stackoverflow.com/questions/2575037/how-to-get-the-cursor-position-in-bash
    exec < /dev/tty
    local oldstty=$(stty -g)
    stty raw -echo min 0
    # on my system, the following line can be replaced by the line below it
    printf "%b" "\033[6n" > /dev/tty
    # tput u7 > /dev/tty    # when TERM=xterm (and relatives)
    IFS=';' read -r -d R -a pos
    stty $oldstty
    # change from one-based to zero based so they work with: tput cup $row $col
    local row=$(expr ${pos[0]:2} - 1)    # strip off the esc-[
    printf "%s\\n" "$row"
}
#==================================================== Example ====
row=$(_getrow)
printf "%s" "$row"
#=================================================================

_getuuid()
{
    [ -z "$1" ] && return 1
    udevadm info -q all -n "$1" | grep -i uuid | egrep "^S:" | cut -f3 -d'/'
}
#==================================================== Example ====
#=================================================================

_inarray()
{   #look for a value in an array, returns 0 on success, 1 otherwise
    [ -z "$1" ] && return 1

    local needle="$1" element
    shift
    for element
    do
        [ X"$element" != X"$needle" ] || return 0
    done
    return 1
}
#==================================================== Example ====
#_inarray $name ${names[@]} && printf "%s\\n" "found!"
#=================================================================

_internetavailable()
{   #check for internet connection, returns 0 on success, 1 otherwise
    wget --tries=3 --timeout=5 http://www.google.com -O /tmp/index.google > /dev/null 2>&1

    if [ -s /tmp/index.google ]; then
        rm /tmp/index.google
        return 0
    else
        rm /tmp/index.google
        return 1
    fi
}
#==================================================== Example ====
#if ! _internetavailable; then
    #printf "%s\\n" "You must have an Internet connection to run this script" >&2
    #exit 1
#fi
#=================================================================

_isalphanum()
{ #check for alphanum strings, return 0 if all upper+lower+digits, 1 otherwise
  # Remove all unacceptable chars
  local compressed="$(printf "%s\\n" "$1" | sed -e 's/[^[:alnum:]]//g')"

  [ X"$compressed" != X"$input" ] && return 0 || return 1
}
#==================================================== Example ====
#printf "%s" "Enter input: "
#read input
#if ! _isalphanum "$input" ; then
    #printf "%s\\n" "Your input must consist of only letters and numbers." >&2
    #exit 1
#else
    #printf "%s\\n" "Input is valid."
#fi
#exit 0
#=================================================================

_isarray()
{   #detect if arg is an array, returns 0 on sucess, 1 otherwise
    declare -p ${1} 2> /dev/null | grep 'declare \-a' >/dev/null && return 0
    return 1
}
#==================================================== Example ====
#vararray=(1 2 3)
#if _isarray vararray; then #the argument is passed as a name
    #printf "%s\\n" "vararray is an array"
#else
    #printf "%s\\n" "vararray is not an array"
#fi
#=================================================================

_islivecd()
{   #detect a livecd system, return 0 on success, 1 otherwise
    grep boot=live /proc/cmdline >/dev/null && return 0
    grep boot=casper /proc/cmdline >/dev/null && return 0
    return 1
}
#==================================================== Example ====
#if _islivecd ; then
    #printf "%s\\n" "Live cd detected"
#else
    #printf "%s\\n" "Non LiveCd detected"
#fi
#=================================================================

_ismonitorattached()
{
    xrandr | grep "^VGA" | grep " connected" >/dev/null && return 0
    xrandr | grep "^HDMI" | grep " connected" >/dev/null && return 0
    return 1
}
#==================================================== Example ====
#if _ismonitorattached; then
    #printf "%s\\n" "At least one monitor is attached"
#else
    #printf "%s\\n" "No monitor are attached"
#fi
#=================================================================

_isnewer()
{   #compare the dates of two files, return true (0) if file1 has
    #been modified more recently otherwise 1

    [ $# -ne 2 ] && exit 1

    if [ ! -f $1 -o ! -f $2 ]; then
        return 1       # No
    fi

    if [ -n "`find $1 -newer $2 -print`" ]; then
        return 0       # Yes
    else
        return 1       # No
    fi
}

_isnum()
{   #look for a number, returns 0 on success, 1 otherwise
    printf "%s\\n" "$@" | grep -v "[^0-9]" >/dev/null
}
#==================================================== Example ====
#printf "%s" "Enter input: "
#read input
#if ! _isnum "$input" ; then
    #printf "%s\\n" "Your input must consist of only numbers." >&2
    #exit 1
#else
    #printf "%s\\n" "Input is valid."
#fi
#exit 0
#=================================================================

_isrunning()
{
    local name=$1
    ps auxw | grep -v grep | grep ${name} >/dev/null && return 0
    return 1
}

_lock()
{
    exec 9>/tmp/$(expr "$1" : '.*/\([^/]*\)').lock #verify only one instance is running
    if ! flock -n 9  ; then         #http://mywiki.wooledge.org/BashFAQ/045
        printf "%s\\n" "$(expr "$1" : '.*/\([^/]*\)'): another instance is running";
        exit 1
    fi
}
#==================================================== Example ====
#_lock $0
#=================================================================

_notify()
{   #notify a msg
    [ -z "$1" ] && return 1

    if [ X"$TERM" = X"linux" ] || [ X"$TERM" = X"dumb" ]; then
        notify-send -t 3000 "${@}"
    else
        printf "%s" "${1}: "
        shift
        while [ -n "$*" ]
        do
            printf "%s\\n" "${1}"
            shift
        done
    fi
}
#==================================================== Example ====
#_notify "You need html2text" "\$ sudo apt-get install html2text"
#=================================================================

_printtime()
{  #format seconds to a pretty string
    NUM=$1
    MIN=0
    HOUR=0
    DAY=0
    if [ $NUM -gt 59 ]; then
        SEC=$(expr $NUM % 60)
        NUM=$(expr $NUM / 60)
        if [ $NUM -gt 59 ]; then
            MIN=$(expr $NUM % 60)
            NUM=$(expr $NUM / 60)
            if [ $NUM -gt 23 ]; then
                HOUR=$(expr $NUM % 24)
                DAY=$(expr $NUM / 24)
            else
                HOUR=$NUM
            fi
        else
            MIN=$NUM
        fi
    else
        SEC=$NUM
    fi
    printf "%s\\n" ""$DAY"d "$HOUR"h "$MIN"m "$SEC"s"
}
#==================================================== Example ====
#SECONDS=12345
#_printtime $SECONDS #prints "0d 3h 25m 49s"
#=================================================================

_privport()
{   #check if port is a num and if it's privated (<1025), returns 0 on success, 1 otherwise
    [ -z "$1" ] && return 1

    printf "%s\\n" "$1" | grep -v "[^0-9]" >/dev/null
    if [ $? -eq 0 ]; then
        [ $1 -gt 0 ] && [ $1 -lt 1025 ] && return 0 || return 1
    else
        return 1
    fi
}
#==================================================== Example ====
#printf "%s" "Enter port: "
#read port
#if _privport "$port" ; then #priv ports requires root
    #sudo script $port
#else
    #script $port
#fi
#=================================================================

_realpath()
{
    local success=true

    # start with the file name (sans the trailing slash)
    local path="$1"
    path="${path%/}"

    # get the basename of the file (ignoring '.' & '..', because they're really part of the path)
    local file_basename="${path##*/}"
    if [ X"$file_basename" = X"." ] || [ X"$file_basename" = X".."  ]; then
        file_basename=""
    fi

    # extracts the directory component of the full path & attempt to change to it
    local directory="${path%$file_basename}"
    if [ "$directory" ]; then
        abs_path="${directory}/${file_basename}"
        printf "%s\\n" "$abs_path"
    else
        if [ ! -z "$file_basename" ] && [ ! -e "$file_basename" ]; then
            success=false
        fi

        # get the absolute path of the current directory & change back to previous directory
        local abs_path="$(pwd -P)"
        #cd "-" &>/dev/null

        # Append base filename to absolute path
        abs_path="${abs_path}/${file_basename}"

        # output the absolute path
        printf "%s\\n" "$abs_path"
    fi

    $success
}
#==================================================== Example ====
#relative_path="../Shared/"
#absolute_path="$(_realpath "$relative_path")"
#if [ $? -eq 0 ]; then
	#printf "%s\\n" "absolute_path = $absolute_path"
#else
	#printf "%s\\n" "'$relative_path' does not exist!"
#fi
#=================================================================

_refarray()
{   #exports an array to another
    #http://ihaveabackup.net/2012/01/29/a-workaround-for-passing-arrays-in-bash/
    [ -z "$1" ] && return 1
    local varname="$1"
    local export_as="$2"
    local code=$(declare -p "$varname")
    printf "%s\\n" "${code/$varname/$export_as}"
}
#==================================================== Example ====
#dump()
#{
    #[ -z "$1" ] && return 1
    #eval $(ref_array "$1" array)
    #local key

    #for key in "${!array[@]}"; do
        #printf "Key: %s, value: %s\n" "$key" "${array[$key]}"
    #done
#}

#declare -A PERSON=([name]="John Doe" [age]=22)
#dump PERSON
#=================================================================

_strlen()
{
    [ -z "$1" ] && return 1
    printf "%s\\n" "${#1}"
}
#==================================================== Example ====
#=================================================================

_strreplace()
{
    [ -z "$1" ] && return 1
    printf "%s\\n" "${1//$2/$3}"
}
#==================================================== Example ====
#hello="hello world"
#bye=$(_strreplace "$string" "hello" "bye")
#world=$(_strreplace "$string" "world")
#printf "%s\\n" "$bye"   #prints "bye world"
#printf "%s\\n" "$world" #prints "world"
#=================================================================

_str2lower()
{   #convert a string to lower string
    [ -z "$1" ] && return 1
    printf "%s\\n" "$@" | tr '[:upper:]' '[:lower:]'
}

_uploadimg()
{   #uploads an image, returns url on success, 1 otherwise
    #requires curl

    [ -z "$1" ] && return 1
    for img
    do
        if [ -f "$img" ] ; then
            case "$img" in
                *.jpg)
                    curl -s -F "image=@$img" -F "key=486690f872c678126a2c09a9e196ce1b" http://imgur.com/api/upload.xml \
                        | grep -E -o "<original_image>(.)*</original_image>" | \
                        grep -E -o "http://i.imgur.com/[^<]*" | tee /dev/fd/2 | xclip
                    ;;
                *.JPG)
                    curl -s -F "image=@$img" -F "key=486690f872c678126a2c09a9e196ce1b" http://imgur.com/api/upload.xml \
                        | grep -E -o "<original_image>(.)*</original_image>" | \
                        grep -E -o "http://i.imgur.com/[^<]*" | tee /dev/fd/2 | xclip
                    ;;
                *.jpeg)
                    curl -s -F "image=@$img" -F "key=486690f872c678126a2c09a9e196ce1b" http://imgur.com/api/upload.xml \
                        | grep -E -o "<original_image>(.)*</original_image>" | \
                        grep -E -o "http://i.imgur.com/[^<]*" | tee /dev/fd/2 | xclip
                    ;;
                *.png)
                    curl -s -F "image=@$img" -F "key=486690f872c678126a2c09a9e196ce1b" http://imgur.com/api/upload.xml \
                        | grep -E -o "<original_image>(.)*</original_image>" | \
                        grep -E -o "http://i.imgur.com/[^<]*" | tee /dev/fd/2 | xclip
                    ;;
                *.PNG)
                    curl -s -F "image=@$img" -F "key=486690f872c678126a2c09a9e196ce1b" http://imgur.com/api/upload.xml \
                        | grep -E -o "<original_image>(.)*</original_image>" | \
                        grep -E -o "http://i.imgur.com/[^<]*" | tee /dev/fd/2 | xclip
                    ;;
                *)
                    return 1
                    ;;
            esac
        else
            return 1
        fi
    done
}
#==================================================== Example ====
#_upload_img file.png
#=================================================================

_usage()
{   #prints an usage msg and exits with 0
    printf "%s\\n" "Usage: `expr "$0" : '.*/\([^/]*\)'` [OPTION] FILE"
    printf "%s\\n" "  -a   description"
    printf "%s\\n" "  -b   description"
    printf "%s\\n" "  -c   description"
    exit 0
}
#===================================================== Example ====
#case $1 in
  #-h | --help | h | help ) _usage;;
#esac
#=================================================================

_validinterface()
{   #return 0 if parameter is a valid network interface, 1 otherwise
    [ -z "$1" ] && return 1
    ip addr | grep "$1" >/dev/null && return 0
    return 1
}
#===================================================== Example ====
#if ! _validinterface $interface
    #printf "%s\\n" "$(expr "$0" : '.*/\([^/]*\)'): not valid interface $interface"
#fi
#=================================================================

_validip4()
{   #return 0 if parameter is a valid ip4 address, non-zero otherwise
    #https://groups.google.com/forum/#!original/comp.unix.shell/NDu-kAL5cHs/7Zpc6Q2Hu5YJ
    case "$*" in
        ""|*[!0-9.]*|*[!0-9]) return 1 ;;
    esac

    local IFS=.  ## local is bash-specific
    set -- $*

    [ $# -eq 4 ] &&
        [ ${1:-666} -le 255 ] && [ ${2:-666} -le 255 ] &&
        [ ${3:-666} -le 255 ] && [ ${4:-666} -le 254 ]
}

_verbose()
{
    [ ! X"$VERBOSE" = X"0" ] && printf "%s\\n" "$*"
}

_waitfor()
{   #wait for a program, shows an animation
    [ -z "$1" ] && return 1

    printf "%s " "    $ $@"
    printf "\\n"
    eval "$@" > /dev/null 2>&1 &
    sleep 1s

    running=$(pidof $1); running=$?
    if [ X"$running" = X"1" ]; then
        printf "\\n"
    else
        pid=$(pidof $1)
        animation_state=1
        printf "%b" "    "

        while [ "`ps -p $pid -o comm=`" ]; do
            # rotating star
            printf "%b" "\b\b\b"
            case $animation_state in
                1)
                    printf "%s" "["
                    printf "%b" "\033[1m|\033[0m"
                    printf "%s" "]"
                    animation_state=2
                    ;;
                2)
                    printf "%s" "["
                    printf "%b" "\033[1m/\033[0m"
                    printf "%s" "]"
                    animation_state=3
                    ;;
                3)
                    printf "%s" "["
                    printf "%b" "\033[1m-\033[0m"
                    printf "%s" "]"
                    animation_state=4
                    ;;
                4)
                    printf "%s" "["
                    printf "%b" "\033[1m"
                    printf "%s" "\\"
                    printf "%b" "\033[0m"
                    printf "%s" "]"
                    animation_state=1
                    ;;
            esac
            sleep 1
        done
        printf "%b\\n" "\b\b\b   "
        printf "\\n"
    fi
}
#==================================================== Example ====
#_waitfor "bzcat file.tar.bz2 | tar xf -"
#=================================================================

_whereis()
{
    [ -z "$1" ] && return 1
    [ -n "$2" ] && return 1
    if ! command -v "$1" 2>/dev/null; then
        return 1
    fi
}
#==================================================== Example ====
#if _whereis command >/dev/null; then
    #command 
#fi
#=================================================================

_xmessage()
{   #prints a message using xmessage || gxmessage
    XMESSAGE=$(command -v gxmessage 2>/dev/null) || XMESSAGE=$(command -v xmessage 2>/dev/null)
    MESSAGE="$PROGNAME: $*"
    printf "%s\\n" "$MESSAGE" | fold -s -w ${COLUMNS:-80} >&2
    if [ -n "$DISPLAY" ] && [ -n "$XMESSAGE" ]; then
        printf "%s\\n" "$MESSAGE" | fold -s -w ${COLUMNS:-80} | $XMESSAGE -center -file -
    fi
}
#==================================================== Example ====
#_xmessage "Notice ..."
#=================================================================
