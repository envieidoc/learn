#!/bin/sh
#set -e

BACKUPDIR="/path"
DBUSER="user"
DBPASSWD="passwd"

_basename()
{
    [ -z "${1}" ] && return 1 || _basename_var_1="${1}"
    [ -z "${2}" ] || _basename_var_suffix="${2}"
    case "${_basename_var_1}" in
        /*|*/*) _basename_var_1="$(expr "${_basename_var_1}" : '.*/\([^/]*\)')" ;;
    esac

    if [ -n "${_basename_var_suffix}" ] && [ "${#_basename_var_1}" -gt "${#2}" ]; then
        if [ X"$(printf "%s" "${_basename_var_1}" | cut -c"$((${#_basename_var_1} - ${#_basename_var_suffix} + 1))")" \
           = X"$(printf "%s" "${_basename_var_suffix}" | cut -c1)" ]; then
            while [ "${#_basename_var_suffix}" -gt "0" ]; do
                if [ X"$(printf "%s" "${_basename_var_1}" | cut -c"${#_basename_var_1}")" \
                   = X"$(printf "%s" "${_basename_var_suffix}" | cut -c"${#_basename_var_suffix}")" ]; then
                    _basename_var_1="$(printf "%s" "${_basename_var_1}" | cut -c1-"$((${#_basename_var_1} - 1))")"
                    _basename_var_suffix_len="$((${#_basename_var_suffix} - 1))"
                    if [ "${_basename_var_suffix_len}" -gt "0" ]; then
                        _basename_var_suffix="$(printf "%s" "${_basename_var_suffix}" | cut -c1-"${_basename_var_suffix_len}")"
                    else
                        _basename_var_suffix=""
                    fi
                fi
            done
        fi
    fi

    printf "%s\\n" "${_basename_var_1}"
}

exec 9>/var/run/$(_basename ${0}).lock    #verify only one instance is running
if ! flock -n 9  ; then                #http://mywiki.wooledge.org/BashFAQ/045
    printf "%s\\n" "$(_basename ${0}): another instance is running";
    exit 1
fi

_printtime()
{  #format seconds to a pretty string
    [ -z "${1}" ] && return 1
    printf "%s\\n" "${1}" | grep -v "[^0-9]" >/dev/null || return 1;

    _printtime_var_num="${1}"
    _printtime_var_min="0"
    _printtime_var_hour="0"
    _printtime_var_day="0"
    if [ "${_printtime_var_num}" -gt "59" ]; then
        _printtime_var_sec="$((${_printtime_var_num} % 60))"
        _printtime_var_num="$((${_printtime_var_num} / 60))"
        if [ "${_printtime_var_num}" -gt "59" ]; then
            _printtime_var_min="$((${_printtime_var_num} % 60))"
            _printtime_var_num="$((${_printtime_var_num} / 60))"
            if [ "${_printtime_var_num}" -gt "23" ]; then
                _printtime_var_hour="$((${_printtime_var_num} % 24))"
                _printtime_var_day="$((${_printtime_var_num} / 24))"
            else
                _printtime_var_hour="${_printtime_var_num}"
            fi
        else
            _printtime_var_min="${_printtime_var_num}"
        fi
    else
        _printtime_var_sec="${_printtime_var_num}"
    fi
    printf "%s\\n" \
    ""${_printtime_var_day}"d "${_printtime_var_hour}"h "${_printtime_var_min}"m "${_printtime_var_sec}"s"
}

sleep "$(tr -cd 0-9 </dev/urandom | head -c 3)"m #wait random minutes to run the backup [0-1000]
START="$(date +%s)"

[ ! -d "${BACKUPDIR}" ] && mkdir -p "${BACKUPDIR}"

#http://dba.stackexchange.com/questions/19532/safest-way-to-perform-mysqldump-on-a-live-system-with-active-reads-and-writes
mysql -u"${DBUSER}" -p"${DBPASSWD}" -Ae"FLUSH TABLES WITH READ LOCK; SELECT SLEEP(86400)" &
sleep 5
mysql -u"${DBUSER}" -p"${DBPASSWD}" -ANe"SHOW PROCESSLIST" | grep "SELECT SLEEP(86400)" > "${BACKUPDIR}"/proclist.txt
SLEEP_ID="$(cat "${BACKUPDIR}"/proclist.txt | awk '{print $1}')"
printf "%s\\n" "KILL ${SLEEP_ID};" > "${BACKUPDIR}"/kill_sleep.sql

DBS="$(mysql -u"${DBUSER}" -p"${DBPASSWD}" -Bse 'show databases')"
for DB in ${DBS}; do
    mysqldump -u "${DBUSER}" -p"${DBPASSWD}" --single-transaction --routines --triggers "${DB}" > "${BACKUPDIR}"/"${DB}".sql
done

mysql -u"${DBUSER}" -p"${DBPASSWD}" -A < "${BACKUPDIR}"/kill_sleep.sql
mysql -u"${DBUSER}" -p"${DBPASSWD}" -Ae"UNLOCK TABLES;"

tar cvf - "$(find "${BACKUPDIR}" -type f -iname "*sql")" | gzip > "${BACKUPDIR}"/dbs.tar.gz

END="$(date +%s)"
DIFF="$((${END} - ${START}))"

printf "%s\\n" "$(date +"%d-%m-%Y"):$(_printtime ${DIFF})" | tee -a "${BACKUPDIR}"/time.txt
