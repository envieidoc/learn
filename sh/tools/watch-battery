#!/bin/sh
#description: display a warning when the system is running out of energy
#             suspend the system if not action is taken
#usage: watch-battery

#it makes more sense to add it as a cron job
#cronjob (every 3 min)
#*/3 * * * * /path/to/this/script

#if ! pgrep upowerd >/dev/null; then
    #exit 1
#fi

PATH=/bin:/usr/bin:/usr/local/bin:/sbin:/usr/local/sbin/:/usr/local/bin:/usr/sbin

_basename()
{
    [ -z "${1}" ] && return 1 || _basename_var_1="${1}"
    [ -z "${2}" ] || _basename_var_suffix="${2}"
    case "${_basename_var_1}" in
        /*|*/*) _basename_var_1="$(expr "${_basename_var_1}" : '.*/\([^/]*\)')" ;;
    esac

    if [ -n "${_basename_var_suffix}" ] && [ "${#_basename_var_1}" -gt "${#2}" ]; then
        if [ X"$(printf "%s" "${_basename_var_1}" | cut -c"$((${#_basename_var_1} - ${#_basename_var_suffix} + 1))")" \
           = X"$(printf "%s" "${_basename_var_suffix}" | cut -c1)" ]; then
            while [ "${#_basename_var_suffix}" -gt "0" ]; do
                if [ X"$(printf "%s" "${_basename_var_1}" | cut -c"${#_basename_var_1}")" \
                   = X"$(printf "%s" "${_basename_var_suffix}" | cut -c"${#_basename_var_suffix}")" ]; then
                    _basename_var_1="$(printf "%s" "${_basename_var_1}" | cut -c1-"$((${#_basename_var_1} - 1))")"
                    _basename_var_suffix_len="$((${#_basename_var_suffix} - 1))"
                    if [ "${_basename_var_suffix_len}" -gt "0" ]; then
                        _basename_var_suffix="$(printf "%s" "${_basename_var_suffix}" | cut -c1-"${_basename_var_suffix_len}")"
                    else
                        _basename_var_suffix=""
                    fi
                fi
            done
        fi
    fi

    printf "%s\\n" "${_basename_var_1}"
}

exec 9>/tmp/"$(_basename ${0})".lock
if ! flock -n 9 ; then
    printf "%s\\n" "$(_basename ${0}): another instance is running";
    exit 1
fi

_notify()
{
    [ -z "${1}" ] && return 1
    [ -z "${2}" ] && return 1
    if [ X"${TERM}" = X"linux" ] || [ -z "${TERM}" ]; then
        kill -9 $(pgrep notify-osd) >/dev/null 2>&1
        if ! DISPLAY=:0 notify-send -t 1000 "${1}"  "${2}"; then
            if command -v "gxmessage" 2>/dev/null; then
                font="Monaco 9"
                gxmessage "${font:+-fn "$font"}" "${1} ${2}" "ok"
            else
                font="fixed"
                xmessage "${font:+-fn "$font"}" "${1} ${2}" "ok"
            fi
        fi
    else
        printf "%s: %s\\n" "${1}" "${2}"
    fi
}

if [ ! -f "$(command -v notify-send)" ] || [ ! -f "$(command -v hibernate)" ] || [ ! -f "$(command -v acpi)" ]; then
    _notify  "[+] You need install acpi, notify-send and hibernate" "$ sudo apt-get install acpi libnotify-bin hibernate"
    exit 1
fi

#=====VARS=====
# Current battery status (Charging/Discharging/AC/Unknown)
STAT="$(acpi -b | awk '{sub(",", ""); print $3}')"
# Battery percentage
BATT="$(acpi -b |awk '{if ($0 ~ "%,") sub("%,", ""); else sub("%", ""); print $4}')"
# Actions
ACTION="$(command -v hibernate)"
WATCH_BATTERY_CURRENT="$(cat /tmp/"$(_basename ${0})" 2>/dev/null)"

# If Discharging...
if [ X"${STAT}" = X"Discharging" ]; then
    # Battery under 5% -> force to hibernate
    if [ "${BATT}" -lt "5" ]; then
        WATCH_BATTERY_CURRENT="5"
        _notify "[-] Critical" "battery under 5%, the system will hibernate in 30 seconds, unless you plugin the computer"
        i=0 ; while [ "${i}" -lt "30" ]; do
            sleep 1
            STAT="$(acpi -b | awk '{sub(",", ""); print $3}')"
            if [ X"${STAT}" != X"Discharging" ]; then
                _notify  "[+] Charging" "charging now..."
                break
            fi
            i="$((${i} + 1))"
        done

        #check a last time if nobody has pluged in the machine, if not hibernate it
        STAT="$(acpi -b | awk '{sub(",", ""); print $3}')"

        if [ X"${STAT}" = X"Discharging" ]; then
            if [ -e "$(command -v mpc)" ]; then
                mpc stop
            fi
            sudo ${ACTION}
        fi

    # Battery under 7% -> print an alert msg and don't repeat it again
    elif [ "${BATT}" -lt "7" ] && [ "${BATT}" -gt "4" ] && [ "${WATCH_BATTERY_CURRENT}" != "7" ]; then
        WATCH_BATTERY_CURRENT="7"
        _notify  "[-] Warning" "battery under 7%"
    # Battery under 10% -> print an alert msg and don't repeat it again
    elif [ "${BATT}" -lt "10" ] && [ "${BATT}" -gt "6" ] && [ "$WATCH_BATTERY_CURRENT" != "10" ]; then
        WATCH_BATTERY_CURRENT="10"
        _notify  "[-] Warning" "battery under 10%"
    # Battery under 15% -> print an alert msg and don't repeat it again
    elif [ "${BATT}" -lt "15" ] && [ "${BATT}" -gt "9" ] && [ "${WATCH_BATTERY_CURRENT}" != "15" ]; then
        WATCH_BATTERY_CURRENT="15"
        _notify  "[-] Warning" "battery under 15%"
    fi
fi

printf "%s\\n" "${WATCH_BATTERY_CURRENT}" > /tmp/"$(_basename ${0})"
