#!/usr/bin/env bash
#records screecasts using ffmpeg
#./screecasts_record [start|stop]
#TODO 14-12-2012 03:52 >> add color, status

#####################################################
#ffmpeg x11grab options
#####################################################
#sqcif-128x96, qcif-176x144, cif-352x288, 4cif-704x576
#16cif-1408x1152, qqvga-160x120, qvga-320x240, vga-640x480
#svga-800x600, xga-1024x768, uxga-1600x1200, qxga-2048x1536
#sxga-1280x1024, qsxga-2560x2048, hsxga-5120x4096, wvga-852x480
#wxga-1366x768, wsxga-1600x1024, wuxga-1920x1200, woxga-2560x1600
#wqsxga-3200x2048, wquxga-3840x2400, whsxga-6400x4096, whuxga-7680x4800
#cga-320x200, ega-640x350, hd480-852x480, hd720-1280x720, hd1080-1920x1080

#follow_mouse
#common="-f x11grab -follow_mouse 60 -show_region 1"
#vcodecs: wmv2, flv, mpeg4, flashsv, zlib

keyword=$1 #start | stop
file=$2    #file name

width=$(xwininfo -root | grep -m1 -i 'width' | awk '{print $2;}')
height=$(xwininfo -root | grep -m1 -i 'height' | awk '{print $2;}')

fullscreen="-f x11grab -s $(xwininfo -root | grep 'geometry' | awk '{print $2;}')"
vga_followscreen="-f x11grab -s vga -follow_mouse 200"
vga="-f x11grab -s vga"
svga_followscreen="-f x11grab -s svga -follow_mouse 250"
svga="-f x11grab -s svga"
xga_followscreen="-f x11grab -s xga -follow_mouse 350"
xga="-f x11grab -s xga"
hd720_followscreen="-f x11grab -s hd720 -follow_mouse 350"
hd720="-f x11grab -s hd720"

#16:9 best for youtube
custom_followscreen="-f x11grab -s 1088x612 -follow_mouse 350"
custom="-f x11grab -s 1088x612"

common="$hd720_followscreen -r 24  -i :0.0 -vcodec flashsv -y"

_usage()
{
    echo "Usage: `expr "$0" : '.*/\([^/]*\)'` [start|stop] [FILE.mkv]"
    echo "           start      start recording"
    echo "           stop       stop recording"
    echo
    echo "If not file is specified it'll generate a random name"
    exit 0
}

_exec()
{
    status=$?
    if [ X"$status" != X"0" ]; then
        exit $status
    fi
    echo "[+] $@"
    $@
}

_notify ()
{
    if [ X"$TERM" = X"linux" ] || [ X"$TERM" = X"dumb" ]; then
        notify-send -t 3000 "${@}"
    else
        echo -n "${1}: "
        shift
        while [ -n "$*" ]
        do
            echo "${1}"
            shift
        done
    fi
}

_countdown ()
{
    local i 
    #https://bugs.launchpad.net/ubuntu/+source/notify-osd/+bug/390508
    #notify-send -t 3000 "${@}" - using xmessage instead
    if [ X"$TERM" = X"linux" ] || [ X"$TERM" = X"dumb" ]; then
        if [[ -d $HOME/data/musnd ]]; then
            mplayer $HOME/data/musnd/Sounds/num$1.ogg >> /dev/null 2>&1
            sleep 1
            for ((i=$1-1; i>=1; i--)); do
                mplayer $HOME/data/musnd/Sounds/num$i.ogg >> /dev/null 2>&1
                sleep 1
            done
        else
            xmessage -center -timeout 1 "$1"
            sleep 1
            for ((i=$1-1; i>=1; i--)); do
                xmessage -center -timeout 1 "$i"
                sleep 1
            done
        fi
        if [[ ! -z $(pidof notify-osd) ]]; then
            killall notify-osd
        fi
    else
        echo -n "    $1"
        sleep 1
        for ((i=$1-1; i>=1; i--)); do
            printf "\b%d" $i
            sleep 1
        done
        printf "\r"
    fi
}

if [[ ! -e /usr/bin/ffmpeg ]]; then
    _notify "You need install ffmpeg before using `expr "$0" : '.*/\([^/]*\)'`" "In Ubuntu/Debian use: \$ sudo apt-get install ffmpeg"
    exit 1
fi

if [[ $(echo $common | grep -i "hd720") ]]; then
    if [[ $height -lt 720 ]]; then
	_notify "[-] hd720 is not supported in your hw" "max width=$width / max height=$height"
	exit 1
    fi
fi

if [ -z $(pidof pulseaudio) ]; then
    mic="-f alsa -i hw:0,0 -acodec pcm_s16le"
else
    mic="-f alsa -i pulse -acodec pcm_s16le"
fi

if [ X"${keyword}" = X"stop" ]; then
    ffmpeg_running=`pidof ffmpeg | awk '{print $1}'`
    if [[ ! -z ${ffmpeg_running} ]]; then
        kill -2 ${ffmpeg_running}
    fi
    exit 0
elif [ ! X"${keyword}" = X"start" ]; then
    _usage
fi

if [[ -z "$file" ]]; then
    file=$HOME/`</dev/urandom tr -dc A-Za-z0-9 | head -c 8`.mkv
fi

_notify "[+] Recording desktop" "to stop it, run \$ screencast_record stop"
_countdown 3
_exec ffmpeg $mic $common $file

if [ X"$?" = X"1" ]; then
    _notify "[+] No mic available" "recording only video..."
    _countdown 3
    _exec ffmpeg $common $file
fi

_notify "[+] Complete" "$file"
