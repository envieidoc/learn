#!/bin/sh
#description: decompress files
#usage: extract file.format

#example: extract files.tar.gz
#file1
#file2
#...

#http://bashscripts.org/forum/viewtopic.php?f=7&t=367
_usage()
{
    printf "%s\\n" "Usage: $(expr "${0}" : '.*/\([^/]*\)') [-s] files ..." >&2
    printf "%s\\n" "           -h       help" >&2
    printf "%s\\n" "           -s       quiet mode" >&2
    exit 1
}

_exec()
{
    _exec_var_status="${?}"
    [ X"${_exec_var_status}" != X"0" ] && exit "${_exec_var_status}"
    printf "%s " "[+] ${@}"
    printf "\\n"
    eval "${@}"
}

_extract()
{
    for _extract_var_file; do
        if [ -z "${SFLAG}" ]; then
            if [ -f "${_extract_var_file}" ] ; then
                case "${_extract_var_file}" in
                    *.deb|*.udeb)           _exec "ar xv '${_extract_var_file}'"                   ;;
                    *.tar.lrz|*.tlrz|*.tlz) _exec "lrzcat < '${_extract_var_file}' | tar xvf -"    ;;
                    *.tar.bz2|*.tbz|*.tbz2) _exec "bzcat < '${_extract_var_file}' | tar xvf -"     ;;
                    *.tar.gz|*.tgz)         _exec "zcat < '${_extract_var_file}' | tar xvf -"      ;;
                    *.tar.lzma)             _exec "lzcat < '${_extract_var_file}' | tar xvf -"     ;;
                    *.tar.xz)               _exec "xzcat < '${_extract_var_file}' | tar xvf -"     ;;
                    *.bz2)                  _exec "bunzip2 -v '${_extract_var_file}'"              ;;
                    *.rar)                  _exec "rar x '${_extract_var_file}'"                   ;;
                    *.gz)                   _exec "gunzip -v '${_extract_var_file}'"               ;;
                    *.tar)                  _exec "tar xvf '${_extract_var_file}'"                 ;;
                    *.zip|*.xpi)            _exec "unzip '${_extract_var_file}'"                   ;;
                    *.7z)                   _exec "7z x '${_extract_var_file}'"                    ;;
                    *.jar)                  _exec "jar xvf '${_extract_var_file}'"                 ;;
                    *.iso)                  _exec "7z x '${_extract_var_file}'"                    ;;
                    *)  printf "%s\\n" "'${_extract_var_file}' is not a valid compressed file" >&2 ;;
                esac
            else
                _usage
            fi
        else
            if [ -f "${_extract_var_file}" ] ; then
                case "${_extract_var_file}" in
                    *.deb|*.udeb)           _exec "ar x '${_extract_var_file}'"                   ;;
                    *.tar.lrz|*.tlrz|*.tlz) _exec "lrzcat -q < '${_extract_var_file}' | tar xf -" ;;
                    *.tar.bz2|*.tbz|*.tbz2) _exec "bzcat < '${_extract_var_file}' | tar xf -"     ;;
                    *.tar.gz|*.tgz)         _exec "zcat < '${_extract_var_file}' | tar xf -"      ;;
                    *.tar.lzma)             _exec "lzcat < '${_extract_var_file}' | tar xf -"     ;;
                    *.tar.xz)               _exec "xzcat < '${_extract_var_file}' | tar xf -"     ;;
                    *.bz2)                  _exec "bzip2 '${_extract_var_file}'"                  ;;
                    *.rar)                  _exec "rar x '${_extract_var_file}'"                  ;;
                    *.gz)                   _exec "gunzip '${_extract_var_file}'"                 ;;
                    *.tar)                  _exec "tar xf '${_extract_var_file}'"                 ;;
                    *.zip|*.xpi)            _exec "unzip '${_extract_var_file}'"                  ;;
                    *.7z)                   _exec "7z x '${_extract_var_file}'"                   ;;
                    *.jar)                  _exec "jar xf '${_extract_var_file}'"                 ;;
                    *.iso)                  _exec "7z x '${_extract_var_file}'"                   ;;
                    *) printf "%s\\n" "'${_extract_var_file}' is not a valid compressed file" >&2 ;;
                esac
            else
                _usage
            fi
        fi
    done
}

if [ ! -t 0 ]; then
    #there is input comming from pipe or file, add to the end of $@
    set -- $(for arg in "${@}"; do printf "%s\\n" "${arg}"; done) $(cat)
fi

[ "${#}" -eq "0" ] && _usage

while getopts ":s:" option; do
    case "${option}" in
        s)  SFLAG=yes
            shift 1; _extract "${@}"
            exit 0 ;;
        :)  printf "%s\\n" "Option -${OPTARG} requires an argument" >&2
            _usage ;;
        \?) printf "%s\\n" "Invalid option: -${OPTARG}" >&2
            _usage ;;
    esac
done

_extract "${@}"
