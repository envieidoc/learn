#!/usr/bin/env bash
#$ extract file.format #http://bashscripts.org/forum/viewtopic.php?f=7&t=367

_usage()
{
    printf "%s\\n" "Usage: `expr "$0" : '.*/\([^/]*\)'` [-s] FILES ..."
    printf "%s\\n" "           -s       quiet mode"
    exit 0
}

[ "$#" -eq 0 ] && _usage

_exec()
{
    status=$?
    if [ X"$status" != X"0" ]; then
        exit $status
    fi
    printf "%s\\n" "[+] $@"
    "$@"
}

_extract()
{
    for FILE
    do
        if [ -z "$SFLAG" ]; then
            if [ -f "$FILE" ] ; then
                case "$FILE" in
                    *.deb|*.udeb)
                        _exec ar xv "$FILE"
                        ;;
                    *.tar.bz2|*.tbz|*.tbz2)
                        _exec tar jxvf "$FILE"
                        ;;
                    *.tar.gz|*.tgz)
                        _exec tar zxvf "$FILE"
                        ;;
                    *.bz2)
                        _exec bunzip2 -v "$FILE"
                        ;;
                    *.rar)
                        _exec rar x "$FILE"
                        ;;
                    *.gz)
                        _exec gunzip -v "$FILE"
                        ;;
                    *.tar)
                        _exec tar xvf "$FILE"
                        ;;
                    *.zip|*.xpi)
                        _exec unzip "$FILE"
                        ;;
                    *.7z)
                        _exec 7z x "$FILE"
                        ;;
                    *.tar.lzma)
                        _exec tar --lzma -xvf "$FILE"
                        ;;
                    *.tar.xz)
                        _exec tar -Jxvf "$FILE"
                        ;;
                    *.jar)
                        _exec jar xvf "$FILE"
                        ;;
                    *.iso)
                        _exec 7z x "$FILE"
                        ;;
                    *)
                        printf "%s\\n" "'$FILE' is not a valid compressed file"
                        ;;
                esac
            else
                _usage
            fi
        else
            if [ -f "$FILE" ] ; then
                case "$FILE" in
                    *.deb|*.udeb)
                        _exec ar x "$FILE"
                        ;;
                    *.tar.bz2|*.tbz|*.tbz2)
                        _exec tar jxf "$FILE"
                        ;;
                    *.tar.gz|*.tgz)
                        _exec tar zxf "$FILE"
                        ;;
                    *.bz2)
                        _exec bunzip2 "$FILE"
                        ;;
                    *.rar)
                        _exec rar x "$FILE"
                        ;;
                    *.gz)
                        _exec gunzip "$FILE"
                        ;;
                    *.tar)
                        _exec tar xf "$FILE"
                        ;;
                    *.zip|*.xpi)
                        _exec unzip "$FILE"
                        ;;
                    *.7z)
                        _exec 7z x "$FILE"
                        ;;
                    *.tar.lzma)
                        _exec tar --lzma -xvf "$FILE"
                        ;;
                    *.tar.xz)
                        _exec tar -Jxf "$FILE"
                        ;;
                    *.jar)
                        _exec jar xf "$FILE"
                        ;;
                    *.iso)
                        _exec 7z x "$FILE"
                        ;;
                    *)
                        printf "%s\\n" "'$FILE' is not a valid compressed file"
                        ;;
                esac
            else
                _usage
            fi
        fi
    done
}

while getopts ":s:" option; do
    case $option in
        s)
          SFLAG=yes
          shift 1; _extract "$@"
          exit 0
          ;;
        :)
          printf "%s\\n" "Option -$OPTARG requires an argument"
          _usage
          ;;
        \?)
          printf "%s\\n" "Invalid option: -$OPTARG"
          _usage
          ;;
    esac
done

_extract "$@"
