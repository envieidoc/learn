#!/usr/bin/env bash
#search in the awesome www.commandlinefu.com site

PATTERN="$@"

# I love colors!
BLUE="$(printf '\E[0;34m')"
DEFAULT="$(printf '\E[0m')"
RED="$(printf '\E[0;31m')"
BROWN="$(printf '\E[0;33m')"
CYAN="$(printf '\E[0;36m')"
DARK_GREY="$(printf '\E[1;30m')"
GREEN="$(printf '\E[0;32m')"
LIGHT_BLUE="$(printf '\E[1;34m')"
LIGHT_CYAN="$(printf '\E[1;36m')"
LIGHT_GREEN="$(printf '\E[1;32m')"
LIGHT_GREY="$(printf '\E[0;37m')"
LIGHT_PURPLE="$(printf '\E[1;35m')"
LIGHT_RED="$(printf '\E[1;31m')"
PURPLE="$(printf '\E[1;35m')"
WHITE="$(printf '\E[1;37m')"
YELLOW="$(printf '\E[0;33m')"

_usage()
{
    printf "%s\\n" "Usage: `expr "$0" : '.*/\([^/]*\)'` [-c] pattern"
    printf "\\n"
    printf "%s\\n" "          -c     Colorize the output"
    exit 0
}

[ -n "$PATTERN" ] || _usage

while getopts ":c:" option; do
    case $option in
        c)
          CFLAG=yes PATTERN=$OPTARG ;;
        :)
          printf "%s\\n" "Option -$OPTARG requires an argument"
          _usage
          ;;
        \?)
          printf "%s\\n" "Invalid option: -$OPTARG"
          _usage
          ;;
    esac
done

if [ -z "$CFLAG" ]; then
    curl -s "http://www.commandlinefu.com/commands/matching/$PATTERN/`printf "%s" "$PATTERN" |  base64`/plaintext/sort-by-votes" |\
    grep --invert-match "commandlinefu.com by David Winterbottom" #I wanna keep the output as clean as possible
else
    curl -s "http://www.commandlinefu.com/commands/matching/$PATTERN/`printf "%s" "$PATTERN" |  base64`/plaintext/sort-by-votes" |\
    grep --invert-match "commandlinefu.com by David Winterbottom" | sed -e "
            s:^#.*:$PURPLE&$DEFAULT:g" -e "
            s:[^#].*:$LIGHT_GREEN&$DEFAULT:g" -e "
            /#/!s/\<$PATTERN\>/$YELLOW&$LIGHT_GREEN/g" #for some reason if I change / for : it doesn't work
            # I couldn't find any way to run :#:!s:\<$PATTERN\>/$RED&$LIGHT_GREEN\$/g in only 1 sed, actually I could ^-^
fi
