#!/bin/sh
#movietime - disables power savings to watch movies.
#usage: movietime

resumetime="1440" #re-enable resume after a full day

_die()
{
    [ -z "${1}" ] && return 1
    printf "%b\\n" "$(expr "${0}" : '.*/\([^/]*\)'): ${*}" >&2
    exit 1
}

_notify()
{
    [ -z "${1}" ] && return 1
    if [ X"${TERM}" = X"linux" ] || [ -z "${TERM}" ]; then
        kill -9 $(pgrep notify-osd) >/dev/null 2>&1
        if ! DISPLAY=:0 notify-send -t 1000 "${1}"  "${2}"; then
            if command -v "gxmessage" 2>/dev/null; then
                font="Monaco 9"
                gxmessage "${font:+-fn "$font"}" "${1} ${2}" "ok"
            else
                font="fixed"
                xmessage "${font:+-fn "$font"}" "${1} ${2}" "ok"
            fi
        fi
    else
        if [ -z "${2}" ]; then
            printf "%s\\n" "${1}"
        else
            printf "%s: %s\\n" "${1}" "${2}"
        fi
    fi
}

_get_minos_config()
{
    [ -z "${1}" ] && return 1
    [ -z "${_get_minos_config_var_home}" ] && _get_minos_config_var_home=$(awk '!/^#|^$/' "${HOME}"/.minos/config 2>&1)
    [ -z "${_get_minos_config_var_etc}" ]  && _get_minos_config_var_etc=$(awk '!/^#|^$/'  /etc/minos/config 2>&1)

    _get_minos_config_var_option="$(printf "%s" "${_get_minos_config_var_home}"|awk -v pattern="^${1}=" -F"=" '$0 ~ pattern {print $2; exit}' 2>&1)"
    [ -z "${_get_minos_config_var_option}" ] && _get_minos_config_var_option="$(printf "%s" "${_get_minos_config_var_etc}"|awk -v pattern="^${1}=" -F"=" '$0 ~ pattern {print $2; exit}' 2>&1)"
    [ -z "${_get_minos_config_var_option}" ] && printf "%s" "" || { eval _get_minos_config_var_option="${_get_minos_config_var_option}"; printf "%s" "${_get_minos_config_var_option}"; }
}

_usage()
{
    printf "\\n" >&2
    printf "%s\\n" "   ${prog} disables screen blanking and screensaver to allow viewing a video. Running the program again will enable them." | fmt -c -w 76 >&2
    printf "\\n" >&2

    #display current values of power management and movietime.
    suspinhtest="$(pgrep -f "${suspinhscript}")"
    suspinhval="$([ -n "${suspinhtest}" ] && printf "%s\\n" "Disabled" || printf "%s\\n" "Desktop settings")"

    #DPMS disabled information
    printf "%s\\n" "   ${txtbld}current settings ${txtrst}(in minutes, 0 = disabled):" >&2
    if [ X"${dispdpms}" = X"Disabled" ]; then
        printf "%s\\n" "   DPMS:         ${dispdpms}" >&2
        printf "%s\\n" "   Suspend:      ${suspinhval}" >&2
    fi

    #DPMS enabled information
    if [ X"${dispdpms}" = X"Enabled" ]; then
        printf "%s\\n" "   DPMS:         ${dispdpms}" >&2
        printf "%s\\n" "   DPMS times:   Blank: ${dispblank}; Standby: ${dispstand}; Suspend: ${dispsusp}; Offtime: ${dispoff}" >&2
        printf "%s\\n" "   Suspend:      ${suspinhval}" >&2
    fi
    printf "\\n" >&2
    printf "%s\\n" "   ${txtbld}${prog} settings${txtrst}:" >&2
    printf "%s\\n" "   Resume after: ${resumetimehr} hours" >&2
    printf "\\n" >&2
    exit 0
}

#suspend inhibit script (must be run as a separate process)
_suspend_script()
{
    printf "%s\\n" '#!/bin/sh
    for time in $(seq 1 '${resumetime}'); do
        # Simulate user activity every minute
        xdotool keydown Shift_L keyup Shift_L
        #dbus-send --print-reply --type=method_call --dest=org.freedesktop.ScreenSaver /ScreenSaver org.freedesktop.ScreenSaver.SimulateUserActivity
        sleep 60
    done'
}

if ! command -v "xdotool" >/dev/null 2>&1; then
    _notify "[-] Error" "you need to install 'xdotool' to run this program"
    exit 1
fi

suspinhscript="${HOME}/.movietime-suspend-inhibit"
prog="$(expr "${0}" : '.*/\([^/]*\)')"

txtbld="$(tput bold)"             #bold
bldred="${txtbld}$(tput setaf 1)" #red
txtrst="$(tput sgr0)"             #reset
warn="${bldred}*${txtrst}"

if [ -z "$(pgrep "X")" ]; then
    _notify "[-] Error" "Xorg server is not running"
    exit 1
fi

if [ X"$(whoami)" = X"root" ]; then
    _notify "[-] Error" "you are root, must be a regular user"
    exit 1
fi

#current DPMS times (in minutes)
dispdpms="$(xset -q  | awk '/DPMS is/ { printf $3 }')" #enab. or disb.
dispstand="$(xset -q | awk '/^  Standby: / { printf $2/60 }')"
dispsusp="$(xset -q  | awk '/^  Standby: / { printf $4/60 }')"
dispoff="$(xset -q   | awk '/^  Standby: / { printf $6/60 }')"
dispblank="$(xset -q | awk '/^  timeout: / { printf $2/60 }')"

#resume time in hours
resumetimehr="$(printf "%s\\n" "scale=1;${resumetime}/60" | bc)"

[ -z "${1}" ] || _usage

#toggle powersaving
if [ X"${dispdpms}" = X"Enabled" ] && [ -z "${suspinhtest}" ]; then
    #disable blanking, screen power saving
    xset s off; xset -dpms
    #create script
    _suspend_script > "${suspinhscript}"
    #make script executable
    chmod +x "${suspinhscript}"
    #run inhibit script
    "${suspinhscript}" > /dev/null 2>&1 &
    #run user defined script
    custom_script="$(_get_minos_config movietime-custom-script)"
    [ -z "${custom_script}" ] && custom_script="${HOME}/.movietime"
    [ -x "${custom_script}" ] && _output="$("${custom_script}" start 2>&1 >/dev/null)"
    _notify "[+] ${prog}" "started"
else
    #enable blanking, screen power saving
    xset s on; xset +dpms
    #kill inhibit script
    if [ -z "${suspinhtest}" ]; then
        kill -9 $(pgrep -f "movietime-susp") > /dev/null 2>&1
        rm -rf "${suspinhscript}"
    fi
    #kill user defined script
    custom_script="$(_get_minos_config movietime-custom-script)"
    [ -z "${custom_script}" ] && custom_script="${HOME}/.movietime"
    [ -x "${custom_script}" ] && _output="$("${custom_script}" stop 2>&1 >/dev/null)"
    _notify "[+] ${prog}" "stopped"
fi
