#!/bin/bash
#http://tinyurl.com/246hm8f
#movietime - disables power savings to watch movies.

#Movietime options
#Resume time - resume normal display pm and suspend after set time.
#0 = disabled, time in minutes

_die()
{   #print a stacktrace with a msg, exits with 1
    local frame=0
    while caller $frame; do
        $((frame=frame+1));
    done

    echo "$*"
    exit 1
}

_ismonitorattached()
{
    xrandr | grep "^VGA" | grep -qs " connected" && return 0
    xrandr | grep "^HDMI" | grep -qs " connected" && return 0
    return 1
}

_arch()
{   #check for system arch, returns [64|32]
    local arch
    [ -z "$MACHTYPE" ] && arch=$(uname -m) || arch=$(echo $MACHTYPE | cut -d- -f1)

    case $arch in
        x86_64)
            arch=64;
            ;;
        i686)
            arch=32;
            ;;
        *)
            exit 1
            ;;
    esac

    echo $arch
}


[ ! -f /usr/bin/xdotool ] && _die "You need to install xdotool: $ sudo apt-get install xdotool"

resumetime=0

if [ X"$resumetime" = X"0" ]; then
  resumetime=1440 # Re-enable resume after a full day
fi

# Check that values for 'resumetime' are numbers
case $resumetime in
    ''|*[!0-9]*) echo Error, \"$resumetime\" is not a number;exit 1;;
esac

# Name of suspend script
tmploc="/tmp"
suspinhscript="$tmploc"/"movietime-suspend-inhibit"

# Program name from it's filename.
prog=${0##*/}

# Text color variables
txtund=$(tput sgr 0 1)          # Underline
txtbld=$(tput bold)             # Bold
bldblu=${txtbld}$(tput setaf 4) #  blue
bldwht=${txtbld}$(tput setaf 7) #  white
bldred=${txtbld}$(tput setaf 1) #  red
txtrst=$(tput sgr0)             # Reset
info=${bldwht}*${txtrst}        # Feedback
pass=${bldblu}*${txtrst}
warn=${bldred}*${txtrst}

usage()
{
    # Help message.
    echo
    echo "   $prog disables screen blanking and screensaver to allow viewing a video.  Running the program again will enable them.  If the 'resumetime' variable is set after that time $prog will resume normal powersaving values." | fmt -c -w 76
    echo

    # Display current values of power management and movietime.
    suspinhtest=$(ps aux | grep -v grep | grep $suspinhscript)
    suspinhval=$([ -n "$suspinhtest" ] && echo "Disabled" || echo "Desktop settings")

    # DPMS disabled information
    echo "   ${txtbld}Current settings ${txtrst}(in minutes, 0 = disabled):"
    if [ X"$dispdpms" = X"Disabled" ]; then
      echo "   DPMS:         $dispdpms"
      echo "   Suspend:      $suspinhval"
    fi

    # DPMS enabled information
    if [ X"$dispdpms" = X"Enabled" ]; then
      echo "   DPMS:         $dispdpms"
      echo "   DPMS times:   Blank: ${dispblank}; Standby: ${dispstand}; Suspend: ${dispsusp}; Offtime: ${dispoff}"
      echo "   Suspend:      $suspinhval"
    fi
    echo
    echo "   ${txtbld}$prog settings${txtrst}:"
    echo "   Resume after: $resumetimehr hours"
    echo
    exit 0
}

# Check that Xorg server is running
if [[ -z $(ps aux | grep /usr/bin/X) ]]; then
  echo "$warn The Xorg server is not running."
  exit
fi

# Check if user is regular user
if [ X"$(whoami)" = X"root" ]; then
  echo "$warn You are the root user, must be a regular user."
  exit
fi

# Current DPMS times (in minutes)
dispdpms=$(xset -q | grep "DPMS is" | awk '{ printf $3 }') # Enab. or Disb.
dispstand=$(xset -q | grep "^  Standby: " | awk '{ printf $2/60 }')
dispsusp=$(xset -q | grep "^  Standby: " | awk '{ printf $4/60 }')
dispoff=$(xset -q | grep "^  Standby: " | awk '{ printf $6/60 }')
dispblank=$(xset -q | grep "^  timeout:  " | awk '{ printf $2/60 }')

# Resume time in hours
resumetimehr=$(echo "scale=1;${resumetime}/60" | bc)

# Display help
case $1 in
  -h | --help | h | help ) usage;;
  [a-g,i-z,A-G,I-Z,0-9,-]* ) usage;;
esac

# Suspend inhibit script (must be run as seperate process)
suspinhibit () {
    echo '#!/bin/bash
    for time in $(seq 1 '$resumetime'); do
    # Simulate user activity every minute
    xdotool keydown Shift_L keyup Shift_L
    #dbus-send --print-reply --type=method_call --dest=org.freedesktop.ScreenSaver /ScreenSaver org.freedesktop.ScreenSaver.SimulateUserActivity
    sleep 60
    done'
}

# Toggle powersaving
if [ X"$dispdpms" = X"Enabled" ] && [ -z "$suspinhtest" ]; then
  # Disable blanking, screen power saving
  xset s off; xset -dpms
  # Create script in tmp
  suspinhibit > "$suspinhscript"
  # Make script executable
  chmod u+x "$suspinhscript"
  # Run script
  nohup "$suspinhscript" &> /dev/null &

  if _ismonitorattached; then
      if [ -f /usr/local/bin/lights/$(_arch)/lights ]; then
          /usr/local/bin/lights/$(_arch)/lights > /dev/null 2>&1 &
      else
          echo "To enjoy fully the movietime experience install: /usr/local/bin/lights/"$_arch"/lights"
          echo "  https://github.com/chilicuil/learn/tree/master/java"
      fi
  fi

  echo "[+] $prog started"
else
  # Enable blanking, screen power saving
  xset s on; xset +dpms
  # Kill script
  if [ -n $suspinhtest ]; then

    kill -s 9 $(pgrep movietime-susp) &> /dev/null
    ps aux | grep -qs [l]ights.jar
    if [ "$?" -eq 0 ]; then
        kill -s 9 $(ps aux | grep [l]ights.jar | awk '{print $2}')
    fi
    echo "[-] $prog stopped"
  fi
fi
