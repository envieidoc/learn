#!/bin/sh
#movietime - disables power savings to watch movies.
#usage: movietime

resume_time="1440"    #re-enable resume after a full day
susp_script="${HOME}/.movietime-suspend-inhibit"
prog="$(expr "${0}" : '.*/\([^/]*\)')"

txtbld="$(tput bold)" #bold
txtrst="$(tput sgr0)" #reset

_die()
{
    [ -z "${1}" ] && return 1
    printf "%b\\n" "$(expr "${0}" : '.*/\([^/]*\)'): ${*}" >&2
    exit 1
}

_notify()
{
    [ -z "${1}" ] && return 1
    if [ X"${TERM}" = X"linux" ] || [ -z "${TERM}" ]; then
        kill -9 $(pgrep notify-osd) >/dev/null 2>&1
        if ! DISPLAY=:0 notify-send -t 1000 "${1}"  "${2}"; then
            if command -v "gxmessage" 2>/dev/null; then
                font="Monaco 9"
                gxmessage "${font:+-fn "$font"}" "${1} ${2}" "ok"
            else
                font="fixed"
                xmessage "${font:+-fn "$font"}" "${1} ${2}" "ok"
            fi
        fi
    else
        if [ -z "${2}" ]; then
            printf "%s\\n" "${1}"
        else
            printf "%s: %s\\n" "${1}" "${2}"
        fi
    fi
}

_usage()
{
    printf "\\n" >&2
    printf "%s\\n" "   ${prog} disables screen blanking and screensaver to allow viewing a video. Running the program again will enable them." | fmt -c -w 76 >&2
    printf "\\n" >&2

    #display current values of power management and movietime.
    _usage_var_running="$(pgrep -f "${susp_script}")"
    _usage_var_dpms_status="$(xset -q  | awk '/DPMS is/ { printf $3 }')"
    _usage_var_susp_status="$([ -n "${_usage_var_running}" ] && printf "%s\\n" "Disabled" || printf "%s\\n" "Desktop settings")"
    _usage_var_standby_time="$(xset -q | awk '/^  Standby: / { printf $2/60 }')"
    _usage_var_susp_time="$(xset -q    | awk '/^  Standby: / { printf $4/60 }')"
    _usage_var_off_time="$(xset -q     | awk '/^  Standby: / { printf $6/60 }')"
    _usage_var_blank_time="$(xset -q   | awk '/^  timeout: / { printf $2/60 }')"
    #resume time in hours
    _usage_var_hours="$(printf "%s\\n" "scale=1;${resume_time}/60" | bc)"


    #DPMS disabled information
    printf "%s\\n" "   ${txtbld}current settings ${txtrst}(in minutes, 0 = disabled):" >&2
    if [ X"${_usage_var_dpms_status}" = X"Disabled" ]; then
        printf "%s\\n" "   DPMS:         ${_usage_var_dpms_status}" >&2
        printf "%s\\n" "   Suspend:      ${_usage_var_susp_status}" >&2
    fi

    #DPMS enabled information
    if [ X"${_usage_var_dpms_status}" = X"Enabled" ]; then
        printf "%s\\n" "   DPMS:         ${_usage_var_dpms_status}" >&2
        printf "%s\\n" "   DPMS times:   Blank: ${_usage_var_blank_time}; Standby: ${_usage_var_standby_time}; Suspend: ${_usage_var_susp_time}; Offtime: ${_usage_var_off_time}" >&2
        printf "%s\\n" "   Suspend:      ${_usage_var_susp_status}" >&2
    fi
    printf "\\n" >&2
    printf "%s\\n" "   ${txtbld}${prog} settings${txtrst}:" >&2
    printf "%s\\n" "   Resume after: ${_usage_var_hours} hours" >&2
    printf "\\n" >&2
    exit 0
}

#suspend inhibit script (must be run as a separate process)
_suspend_script()
{
    printf "%s\\n" '#!/bin/sh
    for time in $(seq 1 '${resume_time}'); do
        # Simulate user activity every minute
        xdotool keydown Shift_L keyup Shift_L
        #dbus-send --print-reply --type=method_call --dest=org.freedesktop.ScreenSaver /ScreenSaver org.freedesktop.ScreenSaver.SimulateUserActivity
        sleep 60
    done'
}

_movietime()
{
    #current DPMS times (in minutes)
    _movietime_var_dmps_status="$(xset -q  | awk '/DPMS is/ { printf $3 }')" #enab. or disb.
    _movietime_var_running="$(pgrep -f "${susp_script}")"

    #toggle powersaving
    if [ X"${_movietime_var_dmps_status}" = X"Enabled" ] && [ -z "${_movietime_var_running}" ]; then
        #disable blanking, screen power saving
        xset s off; xset -dpms
        #create script
        _suspend_script > "${susp_script}"
        #make script executable
        chmod +x "${susp_script}"
        #run inhibit script
        "${susp_script}" > /dev/null 2>&1 &
        #run user defined script
        _movietime_var_custom_script="$(minos-config movietime-custom-script 2>/dev/null)"
        [ -z "${_movietime_var_custom_script}" ] && _movietime_var_custom_script="${HOME}/.movietime"
        [ -x "${_movietime_var_custom_script}" ] && _movietime_var_output="$("${_movietime_var_custom_script}" start 2>&1 >/dev/null)"
        _notify "[+] ${prog}" "started"
    else
        #enable blanking, screen power saving
        xset s on; xset +dpms
        #kill inhibit script
        if [ -z "${suspinhtest}" ]; then
            kill -9 $(pgrep -f "movietime-susp") > /dev/null 2>&1
            rm -rf "${susp_script}"
        fi
        #kill user defined script
        _movietime_var_custom_script="$(minos-config movietime-custom-script 2>/dev/null)"
        [ -z "${_movietime_var_custom_script}" ] && _movietime_var_custom_script="${HOME}/.movietime"
        [ -x "${_movietime_var_custom_script}" ] && _movietime_var_output="$("${_movietime_var_custom_script}" stop 2>&1 >/dev/null)"
        _notify "[+] ${prog}" "stopped"
    fi
}

if ! command -v "xdotool" >/dev/null 2>&1; then
    _notify "[-] Error" "you need to install 'xdotool' to run this program"
    exit 1
fi

if [ -z "$(pgrep "X")" ]; then
    _notify "[-] Error" "Xorg server is not running"
    exit 1
fi

if [ X"$(whoami)" = X"root" ]; then
    _notify "[-] Error" "you are root, must be a regular user"
    exit 1
fi

[ -z "${1}" ] || _usage

_movietime
