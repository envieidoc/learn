#!/bin/bash
# Star Wars'd text
# Copyright (c) 2013 Yu-Jie Lin
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
# Gist: https://gist.github.com/livibetter/7371102

interval=0.5

msg_help="\
Usage: $(basename -- "$0") [OPTION]...
Star War'd input text

Options:
  -i          interval of scrolling. (default: $interval)
  -t          theme colors: gray, rainbow
  -h          you are reading it
"

# yellow colors
COLORS=(58 100 142 184 226)

while getopts 'i:t:h' opt; do
  case "$opt" in
    i)
      interval="$OPTARG"
      ;;
    t)
      case "$OPTARG" in
        gr[ae]y)
          COLORS=(232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255)
          ;;
        rainbow)
          COLORS=(129 92 55 56 21 26 31 36 41 46 82 118 154 190 226 220 214 208 202 196)
          ;;
      esac
      ;;
    h)
      echo "$msg_help"
      exit
  esac
done
shift $((OPTIND-1))

# screen/terminal width and height
SW=$(tput cols)
SH=$(tput lines)

# line length
LL=$((SW / 3))

# lines buffer
LBUF=$((SH * 2 / 3))
BUF=()
for ((y = 0; y <= LBUF; y++)); do
  BUF+=('')
done

trap 'tput cnorm ; echo ; exit' INT EXIT
tput civis
clear
{
  fold -sw $LL
  printf "%${LBUF}s" '' | tr ' ' '\n'
} | while read line; do
  # append new line and pop oldest one if necessary
  BUF=("${BUF[@]:1}" "$line")

  # updating
  for ((y = 0; y < LBUF; y++)); do
    ll=$((y * SW / LBUF))
    t=(${BUF[y]})
    n=${#t[@]}
    # re-spacing
    line="${t[@]}"

    ((${#line} > ll)) && t=("${t[@]//?/~}")
    while ((${#line} > ll)) && [[ "${line// /}" ]]; do
      for ((i = 0; i < n; i++)); do
        [[ "${t[i]}" ]] && t[i]="${t[i]::-1}"
      done
      line="${t[@]}"
    done

    # amount of spaces needed
    ((n_spaces = ll - (${#line} - (n - 1))))
    ((avg_spaces = n ? n_spaces / n : 0))
    printf -v s1 "%${avg_spaces}s" ''
    ((extra_spaces = n_spaces - n * avg_spaces))
    printf -v s2 "%${extra_spaces}s" ''

    line=${line// /$s1}
    # insert extra at first space
    line=${line/ /$s2}

    echo -ne "\e[$((1 + y + SH / 3));1H\e[2K\e[$(((SW - ${#line}) / 2 + 1))G"
    ((C = ${#COLORS[@]} * y / LBUF))
    echo -ne "\e[38;5;${COLORS[C]}m$line"
  done
  sleep "$interval"
done
