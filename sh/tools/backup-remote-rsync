#!/bin/sh
#description: backup directories to a remote system
#usage: backup-remote-rsync [-h|-v|-n|-o|-s|-u USER|-r DOMAIN|-i SSH KEY|-l LOGFILE] [LOCAL_DIR ...]

#example: backup-remote-rsync -v -u admin -i /home/user/.ssh/id_rsa /home/user
#==================================
#Fri May  2 00:27:38 CDT 2013
#==================================
#[V]: exec         : ssh -o PasswordAuthentication=no ...
#[V]: files        : /home/user|
#[V]: remote user  : admin
#[V]: remote server: backup.javier.io:/home/admin/backup/sup
#[V]: ssh key      : /home/user/.ssh/id_rsa
#[V]: log          : /tmp/backup-remote-rsync.log
#[V]: exec         : ssh -i /home/user/.ssh/id_rsa ...
#[V]:  
#[V]: realpath     : /home/user
#[V]: remotepath   : root-home-user
#[V]: exec         : rsync -avz -e "ssh -i /home/user ...
#sending incremental file list
#deleting 05b_refusal.pdf
#code/learn/sh/lib
#code/learn/sh/is/kernel-ck-ubuntu
#...

_basename()
{
    [ -z "${1}" ] && return 1 || _basename_var_name="${1}"
    [ -z "${2}" ] || _basename_var_suffix="${2}"
    case "${_basename_var_name}" in
        /*|*/*) _basename_var_name="$(expr "${_basename_var_name}" : '.*/\([^/]*\)')" ;;
    esac

    if [ -n "${_basename_var_suffix}" ] && [ "${#_basename_var_name}" -gt "${#2}" ]; then
        if [ X"$(printf "%s" "${_basename_var_name}" | cut -c"$((${#_basename_var_name} - ${#_basename_var_suffix} + 1))"-"${#_basename_var_name}")" \
           = X"$(printf "%s" "${_basename_var_suffix}")" ]; then
            _basename_var_name="$(printf "%s" "${_basename_var_name}" | cut -c1-"$((${#_basename_var_name} - ${#_basename_var_suffix}))")"
        fi
    fi

    printf "%s\\n" "${_basename_var_name}"
}

_realpath()
{
    _realpath_var_success="true"
    _realpath_var_path="${1}"

    # make sure the string isn't empty as that implies something in further logic
    if [ -z "${_realpath_var_path}" ]; then
        _realpath_var_success="false"
    else
        # start with the file name (sans the trailing slash)
        _realpath_var_path="${_realpath_var_path%/}"

        # if we stripped off the trailing slash and were left with nothing, that means we're in the root directory
        [ -z "${_realpath_var_path}" ] && _realpath_var_path="/"

        # get the basename of the file (ignoring '.' & '..', because they're really part of the path)
        _realpath_var_file_basename="${_realpath_var_path##*/}"
        if [ X"${_realpath_var_file_basename}" = X"." ] || [ X"${_realpath_var_file_basename}" = X".." ]; then
            _realpath_var_file_basename=""
        fi

        # extracts the directory component of the full path, if it's empty then assume '.' (the current working directory)
        _realpath_var_directory="${_realpath_var_path%${_realpath_var_file_basename}}"
        [ -z "${_realpath_var_directory}" ] && _realpath_var_directory="."

        # attempt to change to the directory
        if ! \cd "${_realpath_var_directory}" >/dev/null 2>/dev/null; then
            _realpath_var_success="false"
        fi

        if "${_realpath_var_success}"; then
            # does the filename exist?
            if [ -n "${_realpath_var_file_basename}" ] && [ ! -e "${_realpath_var_file_basename}" ]; then
                _realpath_var_success="false"
            fi

            # get the absolute path of the current directory & change back to previous directory
            _realpath_var_abs_path="$(pwd -P)"
            \cd "-" >/dev/null 2>/dev/null

            # Append base filename to absolute path
            if [ X"${_realpath_var_abs_path}" = X"/" ]; then
                _realpath_var_abs_path="${_realpath_var_abs_path}${_realpath_var_file_basename}"
            else
                _realpath_var_abs_path="${_realpath_var_abs_path}/${_realpath_var_file_basename}"
            fi

            # output the absolute path
            printf "%s\\n" "${_realpath_var_abs_path}"
        fi
    fi
}

_logger()
{
    if [ -n "${logfile}" ]; then
        printf "%s\\n" "${*}" >&2 | tee -a "${logfile}"
    else
        printf "%s\\n" "${*}" >&2
    fi
}

_verbose()
{
    [ -z "${1}" ] && return 1
    [ -n "${verbose}" ] && _logger "[V]: ${*}"
}

_usage()
{
    printf "%s\\n" "Usage: $(_basename "${0}") [-h|-v|-u USER|-r DOMAIN|-i SSH KEY|-l LOGFILE] [LOCAL_DIR ...]" >&2
    printf "\\n" >&2
    printf "%s\\n" "optional arguments:" >&2
    printf "%s\\n" "  LOCAL_DIR|LOCAL_FILE  dirs|files to backup [${HOME}]" >&2
    printf "%s\\n" "  -h                    this message" >&2
    printf "%s\\n" "  -v                    verbose" >&2
    printf "%s\\n" "  -s                    skip ssh auth pre-tests" >&2
    printf "%s\\n" "  -o                    omit executing commmands, useful with -v" >&2
    printf "%s\\n" "  -n                    dry run, list files to be modified" >&2
    printf "%s\\n" "  -u USER               remote user          [${USER}]" >&2
    printf "%s\\n" "  -r DOMAIN|IP:/path    remote server        [backup.javier.io:${HOME}/backup/$(hostname)]" >&2
    printf "%s\\n" "  -i SSH KEY            ssh public key       [${HOME}/.ssh/id_rsa]" >&2
    printf "%s\\n" "  -l FILE               log file             [/tmp/$(_basename "${0}").log ]" >&2
    printf "\\n" >&2
    printf "%s\\n" "NOTE: Ssh key authentication must be configured for this script to work" >&2
    exit 1
}

_printtime()
{  #format seconds to a pretty string
    [ -z "${1}" ] && return 1
    printf "%s\\n" "${1}" | grep -v "[^0-9]" >/dev/null || return 1;

    _printtime_var_num="${1}"
    _printtime_var_min="0"
    _printtime_var_hour="0"
    _printtime_var_day="0"
    if [ "${_printtime_var_num}" -gt "59" ]; then
        _printtime_var_sec="$((${_printtime_var_num} % 60))"
        _printtime_var_num="$((${_printtime_var_num} / 60))"
        if [ "${_printtime_var_num}" -gt "59" ]; then
            _printtime_var_min="$((${_printtime_var_num} % 60))"
            _printtime_var_num="$((${_printtime_var_num} / 60))"
            if [ "${_printtime_var_num}" -gt "23" ]; then
                _printtime_var_hour="$((${_printtime_var_num} % 24))"
                _printtime_var_day="$((${_printtime_var_num} / 24))"
            else
                _printtime_var_hour="${_printtime_var_num}"
            fi
        else
            _printtime_var_min="${_printtime_var_num}"
        fi
    else
        _printtime_var_sec="${_printtime_var_num}"
    fi
    printf "%s\\n" "${_printtime_var_day}d ${_printtime_var_hour}h ${_printtime_var_min}m ${_printtime_var_sec}s"
}

_hasdotfiles()
{
    [ -z "${1}" ] && return 1
    [ -z "$(find "${1}" -maxdepth 1 -iname ".*" | awk '! /^.$/ {print $1}')" ] && return 1
    return 0
}

_internetavailable()
{   #check for internet connection, returns 0 on success, 1 otherwise
    wget --tries=3 --timeout=5 http://www.google.com -O /tmp/index.google > /dev/null 2>&1

    if [ -s /tmp/index.google ]; then
        rm -rf /tmp/index.google
        return 0
    else
        rm -rf /tmp/index.google
        return 1
    fi
}

_backup()
{
    [ -z "${1}" ] && return 1 || _backup_var_files="${1}"
    [ -z "${2}" ] && return 1 || _backup_var_remote_user="${2}"
    [ -z "${3}" ] && return 1 || _backup_var_remote_server="${3}"
    [ -z "${4}" ] && return 1 || _backup_var_sshkey="${4}"
    [ -n "${dry_run}" ] && _backup_var_dry_run="--dry-run "

    _backup_var_start="$(date +%s)"

    _backup_var_ssh_mkdir="$(printf "%s %s" "ssh -i ${_backup_var_sshkey}" \
        "${_backup_var_remote_user}@$(printf "%s" "${_backup_var_remote_server}" | \
        cut -d':' -f1) mkdir -p backup/$(hostname)")"
    _verbose "exec         : ${_backup_var_ssh_mkdir}"
    [ -z "${ommit}" ] && eval "${_backup_var_ssh_mkdir}" | tee -a "${logfile}"

    OLDIFS="${IFS}"
    IFS="|"

    for file in ${_backup_var_files}; do
        _verbose " "
        _backup_var_realpath="$(_realpath "${file}")"
        _backup_var_remotepath="$(printf "%s" "${_backup_var_realpath}" |           \
            awk '{sub(/\//,"root-"); print $0}' | awk '{gsub(/\//,"-"); print $0}')"
        case "${_backup_var_remotepath}" in
            *-) _backup_var_remotepath="$(printf "%s" "${_backup_var_remotepath}" | \
                cut -c1-"$((${#_backup_var_remotepath} - 1))")" ;;
        esac

        _verbose "realpath     : ${_backup_var_realpath}"
        _verbose "remotepath   : ${_backup_var_remotepath}"

        if [ -d "${_backup_var_realpath}" ]; then
            _backup_var_rsync="$(printf "%s %s %s %s" "rsync ${_backup_var_dry_run}-avz"  \
                "-e \"ssh -i ${_backup_var_sshkey}\" --one-file-system --delete"          \
                "--exclude=\".*\" ${_backup_var_realpath}/"                               \
                "${_backup_var_remote_user}@${_backup_var_remote_server}/${_backup_var_remotepath}")"
            _verbose "exec         : ${_backup_var_rsync}"
            [ -z "${ommit}" ] && eval "${_backup_var_rsync}" | tee -a "${logfile}"

            if _hasdotfiles "${_backup_var_realpath}"; then
                _backup_var_dotfiles="${_backup_var_remotepath}.dotfiles"
                _verbose "dotfiles     : ${_backup_var_dotfiles}"
                _backup_var_rsync="$(printf "%s %s %s %s %s" "ls ${_backup_var_realpath}"     \
                    "| rsync ${_backup_var_dry_run}-avz -e \"ssh -i ${_backup_var_sshkey}\""  \
                    "--one-file-system  --delete --exclude-from=-"                            \
                    "--exclude=.gvfs ${_backup_var_realpath}/"                                \
                    "${_backup_var_remote_user}@${_backup_var_remote_server}/${_backup_var_dotfiles}")"
                    _verbose "exec         : ${_backup_var_rsync}"
                    [ -z "${ommit}" ] && eval "${_backup_var_rsync}" | tee -a "${logfile}"
            else
                _verbose "dotfiles     : no"
            fi
        elif [ -f "${_backup_var_realpath}" ]; then
            _backup_var_rsync="$(printf "%s %s %s %s" "rsync ${_backup_var_dry_run}-avz"  \
               "-e \"ssh -i ${_backup_var_sshkey}\" --one-file-system --delete"           \
               "--exclude=\".*\" ${_backup_var_realpath}"                                 \
               "${_backup_var_remote_user}@${_backup_var_remote_server}/${_backup_var_remotepath}")"
            _verbose "exec         : ${_backup_var_rsync}"
            [ -z "${ommit}" ] && eval "${_backup_var_rsync}" | tee -a "${logfile}"
        fi

    done

    IFS="${OLDIFS}"

    _backup_var_end="$(date +%s)"
    _backup_var_diff="$((${_backup_var_end} - ${_backup_var_start}))"

    _logger "$(printf "%*s\\n" "34" ''  | tr ' ' =)"
    _logger "Total time: $(date +"%d-%m-%Y"):$(_printtime "${_backup_var_diff}")"
    _logger "$(printf "%*s\\n" "34" ''  | tr ' ' =)"

    rsync -e "ssh -i ${_backup_var_sshkey}" "${logfile}" \
        "${_backup_var_remote_user}@${_backup_var_remote_server}"
}

exec 9>/tmp/"$(_basename "${0}")".lock #verify that only one instance is running
if ! flock -n 9  ; then              #http://mywiki.wooledge.org/BashFAQ/045
    printf "%s\\n" "$(_basename "${0}"): another instance is running";
    exit 1
fi

if [ ! -t 0 ]; then
    #there is input comming from pipe or file, add to the end of $@
    set -- $(for arg in "${@}"; do printf "%s\\n" "${arg}"; done) $(cat)
fi

for var; do #parse options
    case "${var}" in
        -h) _usage ;;
        -v) verbose="true"; shift ;;
        -n) dry_run="true"; shift ;;
        -o) ommit="true";   shift ;;
        -s) skip_ssh_tests="true"; shift ;;
        -u) if [ "${#}" -gt "1" ]; then
                remote_user="$(printf "%s " "${@}" | awk '{print $2}')"
                shift 2
            else
               printf "%s\\n" "Option ${var} requires a parameter" >&2; exit 1
            fi ;;
        -r) if [ "${#}" -gt "1" ]; then
                remote_server="$(printf "%s " "${@}" | awk '{print $2}')"
                shift 2
            else
               printf "%s\\n" "Option ${var} requires a parameter" >&2; exit 1
            fi ;;
        -i) if [ "${#}" -gt "1" ]; then
                sshkey="$(printf "%s " "${@}" | awk '{print $2}')"
                shift 2
            else
               printf "%s\\n" "Option ${var} requires a parameter" >&2; exit 1
            fi ;;
        -l) if [ "${#}" -gt "1" ]; then
                logfile="$(printf "%s " "${@}" | awk '{print $2}')"
                shift 2
            else
               printf "%s\\n" "Option ${var} requires a parameter" >&2; exit 1
            fi ;;
        -*) printf "%s\\n" "Unrecognized option: ${var}" >&2; exit 1 ;;
    esac
done

if ! command -v "rsync" >/dev/null; then
    printf "%s\\n" "you need to install 'rsync' to run this program" >&2; exit 1
elif ! command -v "ssh" >/dev/null; then
    printf "%s\\n" "you need to install 'ssh' to run this program" >&2; exit 1
elif ! command -v "wget" >/dev/null; then
    printf "%s\\n" "you need to install 'wget' to run this program" >&2; exit 1
fi

[ -z "${logfile}" ]     && logfile="/tmp/$(_basename "${0}").log"
[ -z "${remote_user}" ] && remote_user="${USER}"

if [ -z "${ommit}" ]; then
    if ! _internetavailable; then
        printf "%s\\n" "$(_basename "${0}"): no internet access" >&2
        exit 1
    fi
fi

_logger "$(printf "%*s\\n" "34" ''  | tr ' ' =)"
_logger "$(date)"
_logger "$(printf "%*s\\n" "34" ''  | tr ' ' =)"

if [ -z "${remote_server}" ]; then
    if [ X"${remote_user}" = X"${USER}" ]; then
        remote_server="backup.javier.io:${HOME}/backup/$(hostname)"
    else
        remote_server="backup.javier.io:/home/${remote_user}/backup/$(hostname)"
    fi
fi

if [ -z "${1}" ]; then
    files="${HOME}"
else
    for file in "${@}"; do
        [ ! -r "${file}" ] && { _logger "[W]: ${file} does not exist or is not readable, skipping"; continue; }
        files="${file}""|""${files}"
    done
fi

if [ -z "${sshkey}" ]; then
    OLDIFS="${IFS}"
    IFS="|"

    for file in ${files}; do
        if [ -f "${file}"/.ssh/id_rsa ]; then
            sshkey="${file}"/.ssh/id_rsa
            break
        fi
    done

    if [ -z "${sshkey}" ]; then
        [ -f "${HOME}"/.ssh/id_rsa ] && sshkey="${HOME}"/.ssh/id_rsa
    fi

    IFS="${OLDIFS}"
fi

if [ -z "${skip_ssh_tests}" ]; then
    [ -z "${sshkey}" ] && { _logger "[E]: no ssh key found!, you may try -i|-s"; printf "\\n" >&2; _usage; }

    remote_ip="$(printf "%s" "${remote_server}"|cut -d':' -f1)"
    ssh_auth_test="$(printf "%s %s %s %s" "ssh -o PasswordAuthentication=no"      \
       "-o ChallengeResponseAuthentication=no -o GSSAPIAuthentication=no"         \
       "-o KbdInteractiveAuthentication=no -i ${sshkey}"                          \
       "${remote_user}@${remote_ip} ls")"

    _verbose "exec         : ${ssh_auth_test}"
    if [ -z "${ommit}" ]; then
        if ! eval "${ssh_auth_test}" >/dev/null 2>&1; then
            _logger "[E]: couldn't connect to remote server, wrong username|ssh key, try -u | -s"
            printf "\\n"
            _usage
        fi
    fi
fi

_verbose "files        : ${files}"
_verbose "remote user  : ${remote_user}"
_verbose "remote server: ${remote_server}"
_verbose "ssh key      : ${sshkey}"
_verbose "log          : ${logfile}"

_backup "${files}" "${remote_user}" "${remote_server}" "${sshkey}" "${logfile}"
