#!/bin/sh
#description: share a directory over http
#usage: share-backup [-u USER|-p PORT|-P PASSWD|-c CERT|-h] [stop] [directory|file]

#example: share-backup backup
#Starting server ..."
#  address   : http://127.0.0.1:2232
#  address   : http://192.168.1.2:2232
#  address   : http://203.212.2.34:2232
#  address   : http://f.javier.io:2232
#
#  username: guest
#  password: Ni3k8alskk2
#  ssl     : yes
#
#  serving:  backup"
#
#Run: share-backup stop, to stop sharing"

_basename()
{
    [ -z "${1}" ] && return 1 || _basename_var_name="${1}"
    [ -z "${2}" ] || _basename_var_suffix="${2}"
    case "${_basename_var_name}" in
        /*|*/*) _basename_var_name="$(expr "${_basename_var_name}" : '.*/\([^/]*\)')" ;;
    esac

    if [ -n "${_basename_var_suffix}" ] && [ "${#_basename_var_name}" -gt "${#2}" ]; then
        if [ X"$(printf "%s" "${_basename_var_name}" | cut -c"$((${#_basename_var_name} - ${#_basename_var_suffix} + 1))"-"${#_basename_var_name}")" \
           = X"$(printf "%s" "${_basename_var_suffix}")" ]; then
            _basename_var_name="$(printf "%s" "${_basename_var_name}" | cut -c1-"$((${#_basename_var_name} - ${#_basename_var_suffix}))")"
        fi
    fi

    printf "%s\\n" "${_basename_var_name}"
}

_usage()
{
    printf "%b\\n" "Usage: $(_basename "${0}") [OPTION]... [DIRECTORY|FILE]" >&2
    printf "\\n" >&2
    printf "%b\\n" "  stop            stop sharing" >&2
    printf "\\n" >&2
    printf "%b\\n" "  -h              show this text" >&2
    printf "%b\\n" "  -u [USER]       set user (guest by default)" >&2
    printf "%b\\n" "  -p [PORT]       set port (random above 1025 by default)" >&2
    printf "%b\\n" "  -P [PASSWORD]   recover archived files" >&2
    printf "%b\\n" "  -c [CERT_FILE]  set certificate.pem" >&2
    printf "\\n" >&2

    exit 1
}

#because of being used over ssh stdin get connected to the remote shell and stay waiting for input
#so I'll disable reading from pipes till I figure out a solution
#if [ ! -t 0 ]; then
    ##there is input comming from pipe or file, add to the end of $@
    #set -- $(for arg in "${@}"; do printf "%s\\n" "${arg}"; done) $(cat)
#fi

if [ X"${1}" = X"stop" ]; then
    ID="$(pgrep -f simple-httpd)"
    [ -n "$ID" ] && { kill -9 "${ID}"; printf "%s\\n" "Stopped"; } || printf "%s\\n" "No instance found" >&2
    exit
fi

if ! command -v "simple-httpd" >/dev/null 2>&1; then
    printf "%s\\n" "$(_basename "${0}"): simple-httpd was not found!" >&2
    printf "%s\\n" "download it at: https://raw.github.com/chilicuil/learn/master/python/simple-httpd" >&2
    exit 1
fi

for var; do #parse options
    case "${var}" in
        -h) _usage ;;
        -u) if [ "${#}" -gt "1" ]; then
                user="$(printf "%s " "${@}" | awk '{print $2}')"
                shift 2
            else
               printf "%s\\n" "Option ${var} requires a parameter" >&2; exit 1
            fi ;;
        -p) if [ "${#}" -gt "1" ]; then
                port="$(printf "%s " "${@}" | awk '{print $2}')"
                shift 2
            else
               printf "%s\\n" "Option ${var} requires a parameter" >&2; exit 1
            fi ;;
        -P) if [ "${#}" -gt "1" ]; then
                passwd="$(printf "%s " "${@}" | awk '{print $2}')"
                shift 2
            else
               printf "%s\\n" "Option ${var} requires a parameter" >&2; exit 1
            fi ;;
        -c) if [ "${#}" -gt "1" ]; then
                cert="$(printf "%s " "${@}" | awk '{print $2}')"
                shift 2
            else
               printf "%s\\n" "Option ${var} requires a parameter" >&2; exit 1
            fi ;;
        -*) printf "%s\\n" "Unrecognized option: ${var}" >&2; _usage ;;
    esac
done

exec 9> /tmp/$(_basename ${0}).lock #verify only one instance is running
if ! flock -n 9; then               #http://mywiki.wooledge.org/BashFAQ/045
    printf "%s\\n" "$(_basename ${0}): another instance is running"; >&2
    _usage
fi

[ -z "${user}" ]   && user="guest"
[ -z "${port}" ]   && port="$(($(tr -cd 0-9 </dev/urandom | head -c 4) + 1025))"
[ -z "${passwd}" ] && passwd="$(date +%s | sha256sum | base64 | head -c 8)"
[ -f "${cert}" ]   && ssl_opts="--ssl --certificate=${CERT}"

if [ -z "${@}" ]; then
    [ -d recovery ] && files="recovery" || files="$(pwd)"
else
    files="${@}"
fi

ips="$(ifconfig | grep "inet " | cut -d: -f2 | cut -d " " -f1)"
ip="$(dig -4 +short myip.opendns.com @resolver1.opendns.com 2>/dev/null)"
ips="${ips} ${ip} $(dig -4 -x "${ip}" | awk '/\.$/ {gsub(/\.$/,""); print $NF; exit;}')"

printf "%s\\n" "Starting server ..."
for addr in ${ips}; do
    printf "%s\\n" "  address : http://${addr}:${port}"
done
printf "%s\\n"
printf "%s\\n" "  username: ${user}"
printf "%s\\n" "  password: ${passwd}"
if [ -n "${ssl_opts}" ]; then
    printf "%s\\n" "  ssl     : ${ssl_opts}"
fi
printf "%s\\n"
printf "%s\\n" "  serving:  ${files}"
printf "%s\\n"
printf "%s\\n" "Run: $(_basename ${0}) stop, to stop sharing"

if [ -d "${files}" ]; then
    eval simple-httpd -p "${port}" --username="${user}" --password="${passwd}" "${ssl_opts}" "${files}"/* >/dev/null 2>&1 &
else
    eval simple-httpd -p "${port}" --username="${user}" --password="${passwd}" "${ssl_opts}" "${files}" >/dev/null 2>&1 &
fi
