#!/usr/bin/env bash
#http://viajemotu.wordpress.com/2012/08/13/kernel-ck-for-ubuntu-precise/
#https://github.com/chilicuil/learn/blob/master/sh/kernel-ck-ubuntu

# $ time bash kernel-ck-ubuntu

#####################################

#####################################
# 3.9
#versão do kernel a ser compilado
kernel=3.9
#patch de atualização
patchkernel=3.9.2
#patch BFQ
bfq=3.9.0-v6r1
vbfq=v6r1
#patch ck
patchck=3.9-ck1
#sufixo
ckk=ck1
#arch
arqt=$(dpkg --print-architecture)
#####################################

#####################################
# 3.8
#versão do kernel a ser compilado
#kernel=3.8
#patch de atualização
#patchkernel=3.8.2
#patch BFQ
#bfq=3.8.0-v6
#vbfq=v6
#patch ck
#patchck=3.8-ck1
#sufixo
#ckk=ck1
#arch
#arqt=$(dpkg --print-architecture)
#####################################

#####################################
# 3.7
#versão do kernel a ser compilado
#kernel=3.7
#patch de atualização
#patchkernel=3.7.6
#patch BFQ
#bfq=3.7.0-v5r1
#vbfq=v5r1
#patch ck
#patchck=3.7-ck1
#sufixo
#ckk=ck1
#arch
#arqt=$(dpkg --print-architecture)
#####################################

#####################################
# 3.6
#versão do kernel a ser compilado
#kernel=3.6
#path de atualização
#patchkernel=3.6.5
#patch BFQ
#bfq=3.6.0-v5
#patch ck
#patchck=3.6-ck1
#sufixo
#ckk=ck1
#arch
#arqt=$(dpkg --print-architecture)
#####################################

#####################################
# 3.4
#versão do kernel a ser compilado
#kernel=3.4
#path de atualização
#patchkernel=3.4.5
#patch BFQ
#bfq=3.4.0-v3r4
#patch ck
#patchck=3.4-ck3
#sufixo
#ckk=ck3
#arch
#arqt=$(dpkg --print-architecture)
#####################################


####################################################################################################################################
##############################################DO NOT EDIT BELOW UNLESS YOU KNOW WHAT YOU'RE DOING###################################
####################################################################################################################################

#the /tmp partitions usually have noexec
tmp_path="$HOME/.tmp/kernel-ck-ubuntu-$patchkernel"
curr_path=$PWD
apps_default="kernel-package gcc-4.6 libncurses5 libncurses5-dev build-essential patch fakeroot bc"

X=1
CL=$(printf "%s\\n" "$(expr $(grep -c processor /proc/cpuinfo) + $X )")

trap _cleanup SIGINT SIGTERM #trap ctrl-c

_header()
{
    clear
    printf "%b\\n" "\033[1m-------------------------------\033[7m $0 $patchkernel \033[0m\033[1m------------------------------\033[0m"
    printf "%b\\n" "\033[1m  Original:\033[0m        http://sourceforge.net/projects/scriptkernel/"
    printf "%b\\n" "\033[1m  Inspired by:\033[0m     http://omicron.homeip.net/projects/#easy_e17.sh"
    printf "%b\\n" "\033[1m  Updates:\033[0m         https://github.com/chilicuil/learn/blob/master/sh/kernel-ck-ubuntu"
    printf "%s\\n"    "                                 send your push request!"
    printf "\\n"
    printf "%b\\n" "\033[1m  Patches:\033[0m         -bfq, -ck, -ubuntu"
    printf "%b\\n" "\033[1m  Config:\033[0m          http://liquorix.net"
    printf "\\n"
    printf "%b\\n" "\033[1m----------------\033[7m Current Configuration: edit the script to change them \033[0m\033[1m--------------\033[0m"
    printf "%s\\n" "  build path:         $tmp_path"
    printf "%s\\n" "  kernel:             $patchkernel"
    printf "%s\\n" "  -bfq patchset:      $bfq"
    printf "%s\\n" "  -ck patchset:       $patchck"
    printf "%s\\n" "  -ubuntu patchset:   v$patchkernel"
    printf "%s\\n" "  sufix:              $ckk"
    printf "%s\\n" "  arch:               $arqt"
    printf "%s\\n" "  concurrency level:  $CL"
    printf "%b\\n" "\033[1m-------------------------------------------------------------------------------------\033[0m"
}

_cmd()
{   #print current command, exits on fail
    [ -z "$1" ] && return 0

    printf "%s\\n" "    $ $@"
    $@

    status=$?
    [ X"$status" != X"0" ] && exit $status || return
}

_cmdsudo()
{   #print current command, exits on fail
    [ -z "$1" ] && return 0

    printf "%s\\n" "    $ sudo $@"
    printf "%s\\n" "$sudopwd" | $sudocmd $@

    status=$?
    [ X"$status" != X"0" ] && exit $status || return
}

_handscui()
{
    [ -z $1 ] && { printf "%5s\n" ""; return 1; }
    pid=$1
    animation_state=1

    if [ ! "$(ps -p $pid -o comm=)" ]; then
        printf "%5s\n" ""
        return
    fi

    printf "%s" "      "

    while [ "`ps -p $pid -o comm=`" ]; do
        printf "%b" "\b\b\b\b\b"
        case $animation_state in
            1)
                printf "%s" '\o@o\'
                animation_state=2
                ;;
            2)
                printf "%s" '|o@o|'
                animation_state=3
                ;;
            3)
                printf "%s" '/o@o/'
                animation_state=4
                ;;
            4)
                printf "%s" '|o@o|'
                animation_state=1
                ;;
        esac
        sleep 1
    done
    printf "%b" "\b\b\b\b\b" && printf "%5s\n" ""
}

_getroot()
{   #get sudo's password, define $sudopasswd and $sudocmd

    local tmp_path="/tmp"; local sudotest; local insudoers;

    if [ ! X"$LOGNAME" = X"root" ]; then
        printf "%s\\n" "Detecting user $LOGNAME (non-root) ..."
        printf "%s\\n" "Checking if sudo is available ..."
        sudotest=`type sudo >/dev/null 2>/dev/null; printf "%s\\n" "$?"`

        if [ X"$sudotest" = X"0" ]; then
            printf "%s\\n" "    Requesting sudo's password, I'll be carefull I promise =)"
            sudo -K
            if [ -e "$tmp_path/sudo.test" ]; then
                rm -f "$tmp_path/sudo.test"
            fi
            while [ -z "$sudopwd" ]; do
                printf "%s" "    - enter sudo-password: "
                stty -echo
                read sudopwd
                stty echo

                # password check
                printf "%s\\n" "$sudopwd" | sudo -S touch "$tmp_path/sudo.test" > "$tmp_path/sudo.output" 2>&1
                insudoers=$(grep -i "sudoers" "$tmp_path/sudo.output")
                if [ -n "$insudoers" ]; then
                    printf "%s\\n" "$sudopwd" | sudo -S rm "$tmp_path/sudo.output" > /dev/null 2>&1
                    exit
                fi

                if [ ! -e "$tmp_path/sudo.test" ]; then
                    sudopwd=""
                fi
            done

            sudocmd="/usr/bin/sudo -S"

            printf "%s\\n" "$sudopwd" | $sudocmd rm -f "$tmp_path/sudo.test" > /dev/null 2>&1
            printf "\\n" 
        else
            printf "%s\\n" "You're not root and sudo isn't available. Please run this script as root!"
            exit
        fi
    fi
}

_cleanup()
{
    stty echo
    printf "%b\\n" "\033[1m-------------------\033[7m Cleanup \033[0m\033[1m-------------------\033[0m"
    printf "%s\\n" "[+] deleting files at $tmp_path ..."
    #printf "%s\\n" "$sudopwd" | $sudocmd rm -v $tmp_path/patch*
    #printf "%s\\n" "$sudopwd" | $sudocmd rm -v $tmp_path/*.patch
    printf "%s\\n" "$sudopwd" | _cmd $sudocmd rm -rf $tmp_path/linux-$patchkernel-$ckk

    #printf "%s\\n" "$sudopwd" | $sudocmd mount -o remount /tmp
    #rm -rf $tmp_path 2>/dev/null
    if [ -z $1 ]; then
        exit
    fi
}

_waitfor()
{
    [ -z $1 ] && return 1

    printf "%s " "    $ $@ ..."
    printf "\\n"
    eval "$@" > /dev/null 2>&1 &
    sleep 1s

    _handscui $(pidof $1)
}

_waitforsudo()
{
    [ -z "$1" ] && return 1

    printf "%s" "    $ sudo $@ ..."
    printf "%s\\n" "$sudopwd" | $sudocmd $@ > /dev/null 2>&1 &
    sleep 1s

    _handscui $(pidof $1)
}

_header
_getroot

printf "%b\\n" "\033[1m--------------------------------\033[7m Fixing dependencies \033[0m\033[1m--------------------------------\033[0m"
_waitforsudo apt-get update
_waitforsudo apt-get install --no-install-recommends -y $apps_default


printf "%b\\n" "\033[1m--------------------------------\033[7m Downloading archives \033[0m\033[1m-------------------------------\033[0m"
printf "%s\\n" "[+] downloading main vanilla kernel tree ..."
_cmd mkdir -p $tmp_path
_cmd cd $tmp_path
_waitfor wget --no-check-certificate -N http://www.kernel.org/pub/linux/kernel/v3.x/linux-$kernel.tar.bz2

printf "%s\\n" "[+] downloading mainstream patches ..."
_waitfor wget --no-check-certificate -N http://www.kernel.org/pub/linux/kernel/v3.x/patch-$patchkernel.bz2

printf "%s\\n" "[+] downloading -ck patches ..."
_waitfor wget -N http://ck.kolivas.org/patches/3.0/$kernel/$patchck/patch-$patchck.bz2

printf "%s\\n" "[+] downloading bfq patches ..."
_waitfor wget -N http://algo.ing.unimo.it/people/paolo/disk_sched/patches/$bfq/0001-block-cgroups-kconfig-build-bits-for-BFQ-$vbfq-$kernel.patch
_waitfor wget -N http://algo.ing.unimo.it/people/paolo/disk_sched/patches/$bfq/0002-block-introduce-the-BFQ-$vbfq-I-O-sched-for-$kernel.patch

printf "%s\\n" "[+] downloading ubuntu patches ..."
_waitfor wget -N http://kernel.ubuntu.com/~kernel-ppa/mainline/v$patchkernel-saucy/0001-base-packaging.patch
_waitfor wget -N http://kernel.ubuntu.com/~kernel-ppa/mainline/v$patchkernel-saucy/0002-debian-changelog.patch
_waitfor wget -N http://kernel.ubuntu.com/~kernel-ppa/mainline/v$patchkernel-saucy/0003-default-configs.patch

printf "%b\\n" "\033[1m-----------------------------\033[7m Applying the patches \033[0m\033[1m------------------------------\033[0m"
printf "%s\\n" "[+] uncompresing kernel to $tmp_path/linux-$kernel/ ..."
if [ ! -d "/$tmp_path/linux-$kernel/" ]; then
    _waitfor "bzcat < $tmp_path/linux-$kernel.tar.bz2 | tar xvf -"
fi

printf "%s\\n" "[+] uncompresing patches ..."
_waitfor bunzip2 patch-$patchkernel.bz2 patch-$patchck.bz2

printf "%s\\n" "[+] moving to $tmp_path/linux-$patchkernel-$ckk"
_waitfor rm -rf linux-$patchkernel-$ckk
_waitfor cp -R "linux-$kernel" "linux-$patchkernel-$ckk"
_cmd cd linux-$patchkernel-$ckk
_cmd printf "\\n"

printf "%s\\n" "[+] applying patches (verbose output) ..."
_cmd patch -p1 < ../patch-$patchkernel
_cmd patch -p1 < ../patch-$patchck
_cmd patch -p1 < ../0001-block-cgroups-kconfig-build-bits-for-BFQ-$vbfq-$kernel.patch
_cmd patch -p1 < ../0002-block-introduce-the-BFQ-$vbfq-I-O-sched-for-$kernel.patch
_cmd patch -p1 < ../0001-base-packaging.patch
_cmd patch -p1 < ../0002-debian-changelog.patch
_cmd patch -p1 < ../0003-default-configs.patch
_cmd printf "\\n"

printf "%b\\n" "\033[1m-----------------------------\033[7m Configuring kernel \033[0m\033[1m----------------------------------\033[0m"
#### criado por Stivekx #############
#config_file=$(locate /boot/config-* | sort -r | head -1)

printf "%s\\n" "[+] downloading optimized config from http://liquorix.net ...    "
_cmd wget "http://liquorix.net/sources/$kernel/config.$arqt"
#TODO 04-03-2013 21:19 >> check when liquorix update config for 3.8, using 3.7 config in the meantime
#Same for 3.9
#_waitfor wget "http://javier.io/mirror/3.9/config.$arqt"
_cmd cp "config.$arqt" .config

#tmp fix for bug #663474
#http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=663474
if [ $arqt == "i386" ]; then
    sed -i "/CONFIG_LGUEST_GUEST/d" .config
elif [ $arqt == "amd64" ]; then
    if [ ! -d ./arch/amd64  ]; then
        cd arch
        ln -s x86 amd64
        cd -
    fi
fi

#thanks StefanescuCristian: https://github.com/chilicuil/learn/commit/c2d44556101f997d70eac4c5536ea241363ee63c#commitcomment-2390064
printf "%s\\n" "[+] making sure BFS and BFQ are enabled in config"
sed -i "/CONFIG_SCHED_CFS=y/d" .config
sed -i "s/# CONFIG_SCHED_BFS is not set/CONFIG_SCHED_BFS=y/g" .config
sed -i "s/# CONFIG_IOSCHED_BFQ is not set/CONFIG_IOSCHED_BFQ=y/g" .config
sed -i "s/CONFIG_DEFAULT_CFQ=y/# CONFIG_DEFAULT_CFQ is not set/g" .config
sed -i "s/CONFIG_DEFAULT_DEADLINE=y/# CONFIG_DEFAULT_DEADLINE is not set/g" .config
sed -i "s/CONFIG_DEFAULT_NOOP=y/# CONFIG_DEFAULT_NOOP is not set/g" .config
sed -i "s/CONFIG_DEFAULT_IOSCHED="cfq"/CONFIG_DEFAULT_IOSCHED="bfq"/g" .config
sed -i "s/CONFIG_DEFAULT_IOSCHED="deadline"/CONFIG_DEFAULT_IOSCHED="bfq"/g" .config
sed -i "s/CONFIG_DEFAULT_IOSCHED="noop"/CONFIG_DEFAULT_IOSCHED="bfq"/g" .config
sed -i "s/# CONFIG_DEFAULT_BFQ is not set/CONFIG_DEFAULT_BFQ=y/g" .config

#printf "%s\\n" "[+] optimizying even more, using streamline_config.pl ...    "
#chmod +x ./scripts/kconfig/streamline_config.pl && ./scripts/kconfig/streamline_config.pl > config_strip
##make localmodconfig
#mv config_strip .config

#printf "%s\\n" "[+] running menuconfig ...    "
#make menuconfig
_cmd printf "\\n"

printf "%b\\n" "\033[1m-----------------------------\033[7m Compiling kernel \033[0m\033[1m----------------------------------\033[0m"

printf "%s\\n" "[+] running make-kpkg ...    "
CONCURRENCY_LEVEL=$CL
printf "\\n" | _cmd fakeroot make-kpkg --initrd kernel_image kernel_headers modules_image
_cmd printf "\\n"

printf "%b\\n" "\033[1m-------------------------------------\033[7m DONE \033[0m\033[1m----------------------------------\033[0m"
printf "%s\\n" "[+] copying debs files ..."
_cmd cp ../linux-*.deb "$curr_path"
printf "%s\\n" "[+] you may want to install the generated packages and reboot your system, run: $ sudo dpkg -i linux-*.deb"
printf "%s\\n" "[+] have fun ^_^!"

#printf "%s\\n" "$sudopwd" | $sudocmd dpkg -i ../*.deb

_cleanup 1

